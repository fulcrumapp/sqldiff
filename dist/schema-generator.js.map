{"version":3,"sources":["../src/schema-generator.js"],"names":["SchemaGenerator","differ","options","changes","diff","tableSchema","tablePrefix","schemaChanges","_","flatten","map","transform","statementForChange","bind","beforeTransform","columnRenamesAndDrops","select","change","type","tablesWithColumnDrops","newTable","uniq","table","id","tablesIdentifiersWithColumnDrops","viewChanges","isSimpleChange","contains","shouldReplaceWithRecreate","push","ids","drop","SchemaChange","oldTable","apply","processIndexes","afterTransform","createTable","recreateTable","dropTable","addColumn","dropColumn","renameColumn","dropView","createView","createIndex","raw","Error","identifier","length","needsQuotes","test","replace","column","escape","name","typeForColumn","columnModifiers","mods","allowNull","defaultValue","join","columns","columnDefinition","view","parts","reference","alias","mappings","newColumn","oldColumn","find","tableName","columnsForTable","sql","newTableName","oldTableName","newTemporaryTableName","oldTemporaryTableName","append","value","isArray","insertInto","renameTable","into","from","mappingForTables","newColumns","pair","oldColumns","transformToDouble","transformToText","escapedSchema","viewName","oldView","newView","projectionForView","clause","indexName","c","indexes","index","method","unique"],"mappings":"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","file":"schema-generator.js","sourcesContent":["import _ from 'underscore';\nimport SchemaChange from './schema-change';\nimport {format as fmt} from 'util';\n\nexport default class SchemaGenerator {\n  constructor(differ, options) {\n    this.differ = differ;\n    this.changes = differ.diff();\n    this.options = options != null ? options : {};\n    this.tableSchema = '';\n    this.tablePrefix = '';\n  }\n\n  generate() {\n    this.schemaChanges = _.flatten(_.map(this.transform(), this.statementForChange.bind(this)));\n    return this.schemaChanges;\n  }\n\n  transform() {\n    const changes = [];\n\n    if (this.options.beforeTransform) {\n      this.options.beforeTransform(this, changes);\n    }\n\n    const columnRenamesAndDrops = _.select(this.changes, function (change) {\n      return change.type === 'drop-column' || change.type === 'rename-column';\n    });\n\n    let tablesWithColumnDrops = _.map(columnRenamesAndDrops, function (change) {\n      return change.newTable;\n    });\n\n    tablesWithColumnDrops = _.uniq(tablesWithColumnDrops, false, function (table) {\n      return table.id;\n    });\n\n    const tablesIdentifiersWithColumnDrops = _.map(tablesWithColumnDrops, function (table) {\n      return table.id;\n    });\n\n    const viewChanges = [];\n\n    for (const change of this.changes) {\n      const isSimpleChange = _.contains(['add-column', 'drop-column', 'rename-column'], change.type);\n\n      const shouldReplaceWithRecreate = isSimpleChange && _.contains(tablesIdentifiersWithColumnDrops, change.newTable.id);\n\n      if (!shouldReplaceWithRecreate) {\n        if (_.contains(['drop-view', 'create-view'], change.type)) {\n          viewChanges.push(change);\n        } else {\n          changes.push(change);\n        }\n      }\n    }\n\n    const ids = [];\n\n    for (const drop of columnRenamesAndDrops) {\n      if (!_.contains(ids, drop.newTable.id)) {\n        changes.push(new SchemaChange('recreate-table', {oldTable: drop.oldTable, newTable: drop.newTable}));\n\n        ids.push(drop.newTable.id);\n      }\n    }\n\n    // make sure the view changes are always at the end so the tables exist when they're created\n    changes.push.apply(changes, viewChanges);\n\n    this.processIndexes(changes);\n\n    if (this.options.afterTransform) {\n      this.options.afterTransform(this, changes);\n    }\n\n    return changes;\n  }\n\n  statementForChange(change) {\n    switch (change.type) {\n      case 'create-table':\n        return this.createTable(change);\n      case 'recreate-table':\n        return this.recreateTable(change);\n      case 'drop-table':\n        return this.dropTable(change);\n      case 'add-column':\n        return this.addColumn(change);\n      case 'drop-column':\n        return this.dropColumn(change);\n      case 'rename-column':\n        return this.renameColumn(change);\n      case 'drop-view':\n        return this.dropView(change);\n      case 'create-view':\n        return this.createView(change);\n      case 'create-index':\n        return this.createIndex(change);\n      case 'raw':\n        return this.raw(change);\n      default:\n        throw new Error('Invalid change type ' + change.type);\n    }\n  }\n\n  escape(identifier) {\n    if (identifier == null || identifier.length === 0) {\n      return '';\n    }\n\n    const needsQuotes = /[^_A-Z0-9]/i.test(identifier) ||\n                        /^[0-9]/.test(identifier);\n\n    if (needsQuotes) {\n      return '\"' + (identifier.replace(/\"/g, '\"\"')) + '\"';\n    }\n\n    return identifier;\n  }\n\n  columnDefinition(column) {\n    return this.escape(column.name) + ' ' + this.typeForColumn(column) + this.columnModifiers(column);\n  }\n\n  columnModifiers(column) {\n    const mods = [];\n\n    if (column.allowNull === false) {\n      mods.push(' NOT NULL');\n    }\n\n    if (column.defaultValue != null) {\n      mods.push(' DEFAULT ' + column.defaultValue);\n    }\n\n    return mods.join('');\n  }\n\n  columnsForTable(table) {\n    return _.map(table.columns, this.columnDefinition.bind(this));\n  }\n\n  projectionForTable(table) {\n    return _.map(table.columns, function (column) {\n      return column.name;\n    });\n  }\n\n  projectionForView(view) {\n    const parts = [];\n\n    for (const reference of view.columns) {\n      if (reference.raw) {\n        parts.push(reference.raw);\n      } else {\n        parts.push(fmt('%s AS %s', this.escape(reference.column.name), this.escape(reference.alias)));\n      }\n    }\n\n    return parts;\n  }\n\n  mappingForTables(oldTable, newTable) {\n    const mappings = [];\n\n    for (const newColumn of newTable.columns) {\n      const oldColumn = _.find(oldTable.columns, function (column) {\n        return column.id === newColumn.id;\n      });\n\n      if (oldColumn) {\n        mappings.push({\n          oldColumn: oldColumn,\n          newColumn: newColumn\n        });\n      }\n    }\n\n    return mappings;\n  }\n\n  escapedSchema() {\n    if (this.tableSchema == null || this.tableSchema.length === 0) {\n      return '';\n    }\n\n    return this.escape(this.tableSchema) + '.';\n  }\n\n  createTable(change) {\n    return fmt('CREATE TABLE IF NOT EXISTS %s (\\n  %s\\n);',\n               this.tableName(change.newTable),\n               this.columnsForTable(change.newTable).join(',\\n  '));\n  }\n\n  raw(change) {\n    return change.sql;\n  }\n\n  recreateTable(change) {\n    const newTableName = change.newTable.name;\n    const oldTableName = change.oldTable.name;\n\n    const newTemporaryTableName = 'tmp_new_' + newTableName;\n    const oldTemporaryTableName = 'tmp_old_' + oldTableName;\n\n    const parts = [];\n\n    const append = (value) => {\n      parts.push.apply(parts, _.isArray(value) ? value : [ value ]);\n    };\n\n    append(this.createTable({newTable: {name: newTemporaryTableName,\n                                        columns: change.newTable.columns}}));\n\n    append(this.insertInto({name: newTemporaryTableName, columns: change.newTable.columns},\n                            change.oldTable));\n\n    append(this.renameTable({oldTable: {name: oldTableName},\n                             newTable: {name: oldTemporaryTableName}}));\n\n    append(this.renameTable({oldTable: {name: newTemporaryTableName},\n                             newTable: {name: newTableName}}));\n\n    append(this.dropTable({oldTable: {name: oldTemporaryTableName}}));\n\n    return parts;\n  }\n\n  insertInto(into, from) {\n    const mappings = this.mappingForTables(from, into);\n\n    const newColumns = _.map(mappings, (pair) => {\n      return this.escape(pair.newColumn.name);\n    });\n\n    const oldColumns = _.map(mappings, (column) => {\n      // handle data type changes\n      if (column.oldColumn.type !== 'double' && column.newColumn.type === 'double') {\n        return this.transformToDouble(this.escape(column.oldColumn.name));\n      } else if (column.oldColumn.type === 'double' && column.newColumn.type !== 'double') {\n        return this.transformToText(this.escape(column.oldColumn.name));\n      } else {\n        return this.escape(column.oldColumn.name);\n      }\n    });\n\n    return fmt('INSERT INTO %s (%s) SELECT %s FROM %s;',\n               this.tableName(into),\n               newColumns.join(', '),\n               oldColumns.join(', '),\n               this.tableName(from));\n  }\n\n  renameTable(change) {\n    return fmt('ALTER TABLE %s RENAME TO %s;',\n               this.tableName(change.oldTable),\n               this.escape(this.tablePrefix + change.newTable.name));\n  }\n\n  dropTable(change) {\n    return fmt('DROP TABLE IF EXISTS %s;',\n               this.tableName(change.oldTable));\n  }\n\n  addColumn(change) {\n    return fmt('ALTER TABLE %s ADD COLUMN %s;',\n               this.tableName(change.newTable),\n               this.columnDefinition(change.column));\n  }\n\n  dropColumn(change) {\n    return fmt('ALTER TABLE %s DROP COLUMN %s;',\n               this.tableName(change.newTable),\n               this.escape(change.column));\n  }\n\n  renameColumn(change) {\n    return fmt('ALTER TABLE %s RENAME COLUMN %s TO %s;',\n               this.tableName(change.newTable),\n               this.escape(change.oldColumn.name),\n               this.escape(change.newColumn.name));\n  }\n\n  tableName(table) {\n    return this.escapedSchema() + this.escape(this.tablePrefix + table.name);\n  }\n\n  viewName(view) {\n    return this.escapedSchema() + this.escape(this.tablePrefix + view.name);\n  }\n\n  indexName(table, columns) {\n    return this.escape('idx_' + this.tablePrefix + table.name + '_' + columns.join('_'));\n  }\n\n  dropView(change) {\n    return fmt('DROP VIEW IF EXISTS %s;', this.viewName(change.oldView));\n  }\n\n  createView(change) {\n    return fmt('CREATE VIEW IF NOT EXISTS %s AS\\nSELECT\\n  %s\\nFROM %s%s;',\n               this.viewName(change.newView),\n               this.projectionForView(change.newView).join(',\\n  '),\n               this.tableName(change.newView.table),\n               change.newView.clause ? ' ' + change.newView.clause : '');\n  }\n\n  createIndex(change) {\n    return fmt('CREATE INDEX %s ON %s (%s);',\n               this.indexName(change.newTable, change.columns),\n               this.tableName(change.newTable),\n               change.columns.map(c => this.escape(c)).join(', '));\n  }\n\n  processIndexes(changes) {\n    for (const change of changes) {\n      if (_.contains(['create-table', 'recreate-table'], change.type)) {\n        for (const index of change.newTable.indexes) {\n          changes.push(new SchemaChange('create-index', {newTable: change.newTable,\n                                                         columns: index.columns,\n                                                         method: index.method,\n                                                         unique: !!index.unique}));\n        }\n      }\n    }\n  }\n}\n"]}
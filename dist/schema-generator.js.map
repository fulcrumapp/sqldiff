{"version":3,"sources":["../src/schema-generator.js"],"names":[],"mappings":"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","file":"schema-generator.js","sourcesContent":["import _ from 'underscore';\nimport SchemaChange from './schema-change';\nimport {format as fmt} from 'util';\n\nexport default class SchemaGenerator {\n  constructor(differ, options) {\n    this.differ = differ;\n    this.changes = differ.diff();\n    this.options = options != null ? options : {};\n    this.tableSchema = '';\n    this.tablePrefix = '';\n  }\n\n  generate() {\n    this.schemaChanges = _.flatten(_.map(this.transform(), this.statementForChange.bind(this)));\n    return this.schemaChanges;\n  }\n\n  transform() {\n    const changes = [];\n\n    if (this.options.beforeTransform) {\n      this.options.beforeTransform(this, changes);\n    }\n\n    const columnRenamesAndDrops = _.select(this.changes, function (change) {\n      return change.type === 'drop-column' || change.type === 'rename-column';\n    });\n\n    let tablesWithColumnDrops = _.map(columnRenamesAndDrops, function (change) {\n      return change.newTable;\n    });\n\n    tablesWithColumnDrops = _.uniq(tablesWithColumnDrops, false, function (table) {\n      return table.id;\n    });\n\n    const tablesIdentifiersWithColumnDrops = _.map(tablesWithColumnDrops, function (table) {\n      return table.id;\n    });\n\n    const viewChanges = [];\n\n    for (const change of this.changes) {\n      const isSimpleChange = _.contains(['add-column', 'drop-column', 'rename-column'], change.type);\n\n      const shouldReplaceWithRecreate = isSimpleChange && _.contains(tablesIdentifiersWithColumnDrops, change.newTable.id);\n\n      if (!shouldReplaceWithRecreate) {\n        if (_.contains(['drop-view', 'create-view'], change.type)) {\n          viewChanges.push(change);\n        } else {\n          changes.push(change);\n        }\n      }\n    }\n\n    const ids = [];\n\n    for (const drop of columnRenamesAndDrops) {\n      if (!_.contains(ids, drop.newTable.id)) {\n        changes.push(new SchemaChange('recreate-table', {oldTable: drop.oldTable, newTable: drop.newTable}));\n\n        ids.push(drop.newTable.id);\n      }\n    }\n\n    // make sure the view changes are always at the end so the tables exist when they're created\n    changes.push.apply(changes, viewChanges);\n\n    this.processIndexes(changes);\n\n    if (this.options.afterTransform) {\n      this.options.afterTransform(this, changes);\n    }\n\n    return changes;\n  }\n\n  statementForChange(change) {\n    switch (change.type) {\n      case 'create-table':\n        return this.createTable(change);\n      case 'recreate-table':\n        return this.recreateTable(change);\n      case 'drop-table':\n        return this.dropTable(change);\n      case 'add-column':\n        return this.addColumn(change);\n      case 'drop-column':\n        return this.dropColumn(change);\n      case 'rename-column':\n        return this.renameColumn(change);\n      case 'drop-view':\n        return this.dropView(change);\n      case 'create-view':\n        return this.createView(change);\n      case 'create-index':\n        return this.createIndex(change);\n      case 'raw':\n        return this.raw(change);\n      default:\n        throw new Error('Invalid change type ' + change.type);\n    }\n  }\n\n  escape(identifier) {\n    if (identifier == null || identifier.length === 0) {\n      return '';\n    }\n\n    const needsQuotes = /[^_A-Z0-9]/i.test(identifier) ||\n                        /^[0-9]/.test(identifier);\n\n    if (needsQuotes) {\n      return '\"' + (identifier.replace(/\"/g, '\"\"')) + '\"';\n    }\n\n    return identifier;\n  }\n\n  columnDefinition(column) {\n    return this.escape(column.name) + ' ' + this.typeForColumn(column) + this.columnModifiers(column);\n  }\n\n  columnModifiers(column) {\n    const mods = [];\n\n    if (column.allowNull === false) {\n      mods.push(' NOT NULL');\n    }\n\n    if (column.defaultValue != null) {\n      mods.push(' DEFAULT ' + column.defaultValue);\n    }\n\n    return mods.join('');\n  }\n\n  columnsForTable(table) {\n    return _.map(table.columns, this.columnDefinition.bind(this));\n  }\n\n  projectionForTable(table) {\n    return _.map(table.columns, function (column) {\n      return column.name;\n    });\n  }\n\n  projectionForView(view) {\n    const parts = [];\n\n    for (const reference of view.columns) {\n      if (reference.raw) {\n        parts.push(reference.raw);\n      } else {\n        parts.push(fmt('%s AS %s', this.escape(reference.column.name), this.escape(reference.alias)));\n      }\n    }\n\n    return parts;\n  }\n\n  mappingForTables(oldTable, newTable) {\n    const mappings = [];\n\n    for (const newColumn of newTable.columns) {\n      const oldColumn = _.find(oldTable.columns, function (column) {\n        return column.id === newColumn.id;\n      });\n\n      if (oldColumn) {\n        mappings.push({\n          oldColumn: oldColumn,\n          newColumn: newColumn\n        });\n      }\n    }\n\n    return mappings;\n  }\n\n  escapedSchema() {\n    if (this.tableSchema == null || this.tableSchema.length === 0) {\n      return '';\n    }\n\n    return this.escape(this.tableSchema) + '.';\n  }\n\n  createTable(change) {\n    return fmt('CREATE TABLE IF NOT EXISTS %s (\\n  %s\\n);',\n               this.tableName(change.newTable),\n               this.columnsForTable(change.newTable).join(',\\n  '));\n  }\n\n  raw(change) {\n    return change.sql;\n  }\n\n  recreateTable(change) {\n    const newTableName = change.newTable.name;\n    const oldTableName = change.oldTable.name;\n\n    const newTemporaryTableName = 'tmp_new_' + newTableName;\n    const oldTemporaryTableName = 'tmp_old_' + oldTableName;\n\n    const parts = [];\n\n    const append = (value) => {\n      parts.push.apply(parts, _.isArray(value) ? value : [ value ]);\n    };\n\n    append(this.createTable({newTable: {name: newTemporaryTableName,\n                                        columns: change.newTable.columns}}));\n\n    append(this.insertInto({name: newTemporaryTableName, columns: change.newTable.columns},\n                            change.oldTable));\n\n    append(this.renameTable({oldTable: {name: oldTableName},\n                             newTable: {name: oldTemporaryTableName}}));\n\n    append(this.renameTable({oldTable: {name: newTemporaryTableName},\n                             newTable: {name: newTableName}}));\n\n    append(this.dropTable({oldTable: {name: oldTemporaryTableName}}));\n\n    return parts;\n  }\n\n  insertInto(into, from) {\n    const mappings = this.mappingForTables(from, into);\n\n    const newColumns = _.map(mappings, (pair) => {\n      return this.escape(pair.newColumn.name);\n    });\n\n    const oldColumns = _.map(mappings, (column) => {\n      // handle data type changes\n      if (column.oldColumn.type !== 'double' && column.newColumn.type === 'double') {\n        return this.transformToDouble(this.escape(column.oldColumn.name));\n      } else if (column.oldColumn.type === 'double' && column.newColumn.type !== 'double') {\n        return this.transformToText(this.escape(column.oldColumn.name));\n      } else {\n        return this.escape(column.oldColumn.name);\n      }\n    });\n\n    return fmt('INSERT INTO %s (%s) SELECT %s FROM %s;',\n               this.tableName(into),\n               newColumns.join(', '),\n               oldColumns.join(', '),\n               this.tableName(from));\n  }\n\n  renameTable(change) {\n    return fmt('ALTER TABLE %s RENAME TO %s;',\n               this.tableName(change.oldTable),\n               this.escape(this.tablePrefix + change.newTable.name));\n  }\n\n  dropTable(change) {\n    return fmt('DROP TABLE IF EXISTS %s;',\n               this.tableName(change.oldTable));\n  }\n\n  addColumn(change) {\n    return fmt('ALTER TABLE %s ADD COLUMN %s;',\n               this.tableName(change.newTable),\n               this.columnDefinition(change.column));\n  }\n\n  dropColumn(change) {\n    return fmt('ALTER TABLE %s DROP COLUMN %s;',\n               this.tableName(change.newTable),\n               this.escape(change.column));\n  }\n\n  renameColumn(change) {\n    return fmt('ALTER TABLE %s RENAME COLUMN %s TO %s;',\n               this.tableName(change.newTable),\n               this.escape(change.oldColumn.name),\n               this.escape(change.newColumn.name));\n  }\n\n  tableName(table) {\n    return this.escapedSchema() + this.escape(this.tablePrefix + table.name);\n  }\n\n  viewName(view) {\n    return this.escapedSchema() + this.escape(this.tablePrefix + view.name);\n  }\n\n  indexName(table, columns) {\n    return this.escape('idx_' + this.tablePrefix + table.name + '_' + columns.join('_'));\n  }\n\n  dropView(change) {\n    return fmt('DROP VIEW IF EXISTS %s;', this.viewName(change.oldView));\n  }\n\n  createView(change) {\n    return fmt('CREATE VIEW IF NOT EXISTS %s AS\\nSELECT\\n  %s\\nFROM %s%s;',\n               this.viewName(change.newView),\n               this.projectionForView(change.newView).join(',\\n  '),\n               this.tableName(change.newView.table),\n               change.newView.clause ? ' ' + change.newView.clause : '');\n  }\n\n  createIndex(change) {\n    return fmt('CREATE INDEX %s ON %s (%s);',\n               this.indexName(change.newTable, change.columns),\n               this.tableName(change.newTable),\n               change.columns.map(c => this.escape(c)).join(', '));\n  }\n\n  processIndexes(changes) {\n    for (const change of changes) {\n      if (_.contains(['create-table', 'recreate-table'], change.type)) {\n        for (const index of change.newTable.indexes) {\n          changes.push(new SchemaChange('create-index', {newTable: change.newTable,\n                                                         columns: index.columns,\n                                                         method: index.method,\n                                                         unique: !!index.unique}));\n        }\n      }\n    }\n  }\n}\n"]}
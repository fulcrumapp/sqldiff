{"version":3,"sources":["../src/schema-generator.js"],"names":["SchemaGenerator","differ","options","changes","diff","tableSchema","tablePrefix","generate","schemaChanges","transform","statementForChange","bind","beforeTransform","columnRenamesAndDrops","change","type","tablesWithColumnDrops","newTable","table","id","tablesIdentifiersWithColumnDrops","viewChanges","isSimpleChange","shouldReplaceWithRecreate","push","ids","drop","SchemaChange","oldTable","apply","processIndexes","afterTransform","createTable","recreateTable","dropTable","addColumn","dropColumn","renameColumn","dropView","createView","createIndex","raw","Error","escape","identifier","length","needsQuotes","test","replace","columnDefinition","column","name","typeForColumn","columnModifiers","mods","allowNull","defaultValue","join","columnsForTable","columns","projectionForTable","projectionForView","view","parts","reference","alias","mappingForTables","mappings","newColumn","oldColumn","escapedSchema","tableName","sql","newTableName","oldTableName","newTemporaryTableName","oldTemporaryTableName","append","value","insertInto","renameTable","into","from","newColumns","pair","oldColumns","transformToDouble","transformToText","transformToDate","viewName","indexName","oldView","newView","clause","map","c","indexes","index","method","unique"],"mappings":"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","sourcesContent":["import { flatten, find, filter, map, uniq, includes, isArray } from 'lodash';\nimport SchemaChange from './schema-change';\nimport { format as fmt } from 'util';\n\nexport default class SchemaGenerator {\n  constructor(differ, options) {\n    this.differ = differ;\n    this.changes = differ.diff();\n    this.options = options != null ? options : {};\n    this.tableSchema = '';\n    this.tablePrefix = '';\n  }\n\n  generate() {\n    this.schemaChanges = flatten(map(this.transform(), this.statementForChange.bind(this)));\n    return this.schemaChanges;\n  }\n\n  transform() {\n    const changes = [];\n\n    if (this.options.beforeTransform) {\n      this.options.beforeTransform(this, changes);\n    }\n\n    const columnRenamesAndDrops = filter(this.changes, (change) => {\n      return change.type === 'drop-column' || change.type === 'rename-column';\n    });\n\n    let tablesWithColumnDrops = map(columnRenamesAndDrops, (change) => {\n      return change.newTable;\n    });\n\n    tablesWithColumnDrops = uniq(tablesWithColumnDrops, false, (table) => {\n      return table.id;\n    });\n\n    const tablesIdentifiersWithColumnDrops = map(tablesWithColumnDrops, (table) => {\n      return table.id;\n    });\n\n    const viewChanges = [];\n\n    for (const change of this.changes) {\n      const isSimpleChange = includes(['add-column', 'drop-column', 'rename-column'], change.type);\n\n      const shouldReplaceWithRecreate = isSimpleChange && includes(tablesIdentifiersWithColumnDrops, change.newTable.id);\n\n      if (!shouldReplaceWithRecreate) {\n        if (includes(['drop-view', 'create-view'], change.type)) {\n          viewChanges.push(change);\n        } else {\n          changes.push(change);\n        }\n      }\n    }\n\n    const ids = [];\n\n    for (const drop of columnRenamesAndDrops) {\n      if (!includes(ids, drop.newTable.id)) {\n        changes.push(new SchemaChange('recreate-table', { oldTable: drop.oldTable, newTable: drop.newTable }));\n\n        ids.push(drop.newTable.id);\n      }\n    }\n\n    // make sure the view changes are always at the end so the tables exist when they're created\n    changes.push.apply(changes, viewChanges);\n\n    this.processIndexes(changes);\n\n    if (this.options.afterTransform) {\n      this.options.afterTransform(this, changes);\n    }\n\n    return changes;\n  }\n\n  statementForChange(change) {\n    switch (change.type) {\n      case 'create-table':\n        return this.createTable(change);\n      case 'recreate-table':\n        return this.recreateTable(change);\n      case 'drop-table':\n        return this.dropTable(change);\n      case 'add-column':\n        return this.addColumn(change);\n      case 'drop-column':\n        return this.dropColumn(change);\n      case 'rename-column':\n        return this.renameColumn(change);\n      case 'drop-view':\n        return this.dropView(change);\n      case 'create-view':\n        return this.createView(change);\n      case 'create-index':\n        return this.createIndex(change);\n      case 'raw':\n        return this.raw(change);\n      default:\n        throw new Error('Invalid change type ' + change.type);\n    }\n  }\n\n  escape(identifier) {\n    if (identifier == null || identifier.length === 0) {\n      return '';\n    }\n\n    const needsQuotes = /[^_A-Z0-9]/i.test(identifier) ||\n                        /^[0-9]/.test(identifier);\n\n    if (needsQuotes) {\n      return '\"' + (identifier.replace(/\"/g, '\"\"')) + '\"';\n    }\n\n    return identifier;\n  }\n\n  columnDefinition(column) {\n    return this.escape(column.name) + ' ' + this.typeForColumn(column) + this.columnModifiers(column);\n  }\n\n  columnModifiers(column) {\n    const mods = [];\n\n    if (column.allowNull === false) {\n      mods.push(' NOT NULL');\n    }\n\n    if (column.defaultValue != null) {\n      mods.push(' DEFAULT ' + column.defaultValue);\n    }\n\n    return mods.join('');\n  }\n\n  columnsForTable(table) {\n    return map(table.columns, this.columnDefinition.bind(this));\n  }\n\n  projectionForTable(table) {\n    return map(table.columns, (column) => {\n      return column.name;\n    });\n  }\n\n  projectionForView(view) {\n    const parts = [];\n\n    for (const reference of view.columns) {\n      if (reference.raw) {\n        parts.push(reference.raw);\n      } else {\n        parts.push(fmt('%s AS %s', this.escape(reference.column.name), this.escape(reference.alias)));\n      }\n    }\n\n    return parts;\n  }\n\n  mappingForTables(oldTable, newTable) {\n    const mappings = [];\n\n    for (const newColumn of newTable.columns) {\n      const oldColumn = find(oldTable.columns, function (column) {\n        return column.id === newColumn.id;\n      });\n\n      if (oldColumn) {\n        mappings.push({\n          oldColumn: oldColumn,\n          newColumn: newColumn\n        });\n      }\n    }\n\n    return mappings;\n  }\n\n  escapedSchema() {\n    if (this.tableSchema == null || this.tableSchema.length === 0) {\n      return '';\n    }\n\n    return this.escape(this.tableSchema) + '.';\n  }\n\n  createTable(change) {\n    return fmt('CREATE TABLE IF NOT EXISTS %s (\\n  %s\\n);',\n      this.tableName(change.newTable),\n      this.columnsForTable(change.newTable).join(',\\n  '));\n  }\n\n  raw(change) {\n    return change.sql;\n  }\n\n  recreateTable(change) {\n    const newTableName = change.newTable.name;\n    const oldTableName = change.oldTable.name;\n\n    const newTemporaryTableName = 'tmp_new_' + newTableName;\n    const oldTemporaryTableName = 'tmp_old_' + oldTableName;\n\n    const parts = [];\n\n    const append = (value) => {\n      parts.push.apply(parts, isArray(value) ? value : [ value ]);\n    };\n\n    append(this.createTable({ newTable: { name: newTemporaryTableName,\n      columns: change.newTable.columns } }));\n\n    append(this.insertInto({ name: newTemporaryTableName, columns: change.newTable.columns },\n      change.oldTable));\n\n    append(this.renameTable({ oldTable: { name: oldTableName },\n      newTable: { name: oldTemporaryTableName }}));\n\n    append(this.renameTable({ oldTable: { name: newTemporaryTableName },\n      newTable: { name: newTableName}}));\n\n    append(this.dropTable({ oldTable: { name: oldTemporaryTableName } }));\n\n    return parts;\n  }\n\n  insertInto(into, from) {\n    const mappings = this.mappingForTables(from, into);\n\n    const newColumns = map(mappings, (pair) => {\n      return this.escape(pair.newColumn.name);\n    });\n\n    const oldColumns = map(mappings, (column) => {\n      // handle data type changes\n      if (column.oldColumn.type !== 'double' && column.newColumn.type === 'double') {\n        return this.transformToDouble(this.escape(column.oldColumn.name));\n      } else if (column.oldColumn.type === 'double' && column.newColumn.type !== 'double') {\n        return this.transformToText(this.escape(column.oldColumn.name));\n      } else if (column.oldColumn.type !== 'date' && column.newColumn.type === 'date') {\n        return this.transformToDate(this.escape(column.oldColumn.name));\n      } else {\n        return this.escape(column.oldColumn.name);\n      }\n    });\n\n    return fmt('INSERT INTO %s (%s) SELECT %s FROM %s;',\n      this.tableName(into),\n      newColumns.join(', '),\n      oldColumns.join(', '),\n      this.tableName(from));\n  }\n\n  renameTable(change) {\n    return fmt('ALTER TABLE %s RENAME TO %s;',\n      this.tableName(change.oldTable),\n      this.escape(this.tablePrefix + change.newTable.name));\n  }\n\n  dropTable(change) {\n    return fmt('DROP TABLE IF EXISTS %s;',\n      this.tableName(change.oldTable));\n  }\n\n  addColumn(change) {\n    return fmt('ALTER TABLE %s ADD COLUMN %s;',\n      this.tableName(change.newTable),\n      this.columnDefinition(change.column));\n  }\n\n  dropColumn(change) {\n    return fmt('ALTER TABLE %s DROP COLUMN %s;',\n      this.tableName(change.newTable),\n      this.escape(change.column));\n  }\n\n  renameColumn(change) {\n    return fmt('ALTER TABLE %s RENAME COLUMN %s TO %s;',\n      this.tableName(change.newTable),\n      this.escape(change.oldColumn.name),\n      this.escape(change.newColumn.name));\n  }\n\n  tableName(table) {\n    return this.escapedSchema() + this.escape(this.tablePrefix + table.name);\n  }\n\n  viewName(view) {\n    return this.escapedSchema() + this.escape(this.tablePrefix + view.name);\n  }\n\n  indexName(table, columns) {\n    return this.escape('idx_' + this.tablePrefix + table.name + '_' + columns.join('_'));\n  }\n\n  dropView(change) {\n    return fmt('DROP VIEW IF EXISTS %s;', this.viewName(change.oldView));\n  }\n\n  createView(change) {\n    return fmt('CREATE VIEW IF NOT EXISTS %s AS\\nSELECT\\n  %s\\nFROM %s%s;',\n      this.viewName(change.newView),\n      this.projectionForView(change.newView).join(',\\n  '),\n      this.tableName(change.newView.table),\n      change.newView.clause ? ' ' + change.newView.clause : '');\n  }\n\n  createIndex(change) {\n    return fmt('CREATE INDEX %s ON %s (%s);',\n      this.indexName(change.newTable, change.columns),\n      this.tableName(change.newTable),\n      change.columns.map(c => this.escape(c)).join(', '));\n  }\n\n  processIndexes(changes) {\n    for (const change of changes) {\n      if (includes(['create-table', 'recreate-table'], change.type)) {\n        for (const index of change.newTable.indexes) {\n          changes.push(new SchemaChange('create-index', {newTable: change.newTable,\n            columns: index.columns,\n            method: index.method,\n            unique: !!index.unique}));\n        }\n      }\n    }\n  }\n}\n"],"file":"schema-generator.js"}
{"version":3,"sources":["../src/schema-generator.js"],"names":[],"mappings":"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","file":"schema-generator.js","sourcesContent":["import _ from 'underscore';\nimport SchemaChange from './schema-change';\nimport {format as fmt} from 'util';\n\nexport default class SchemaGenerator {\n  constructor(differ, options) {\n    this.differ = differ;\n    this.changes = differ.diff();\n    this.options = options != null ? options : {};\n    this.tableSchema = '';\n    this.tablePrefix = '';\n  }\n\n  generate() {\n    this.schemaChanges = _.flatten(_.map(this.transform(), this.statementForChange.bind(this)));\n    return this.schemaChanges;\n  }\n\n  transform() {\n    const changes = [];\n\n    if (this.options.beforeTransform) {\n      this.options.beforeTransform(changes);\n    }\n\n    const columnRenamesAndDrops = _.select(this.changes, function (change) {\n      return change.type === 'drop-column' || change.type === 'rename-column';\n    });\n\n    let tablesWithColumnDrops = _.map(columnRenamesAndDrops, function (change) {\n      return change.newTable;\n    });\n\n    tablesWithColumnDrops = _.uniq(tablesWithColumnDrops, false, function (table) {\n      return table.id;\n    });\n\n    const tablesIdentifiersWithColumnDrops = _.map(tablesWithColumnDrops, function (table) {\n      return table.id;\n    });\n\n    for (const change of this.changes) {\n      const isSimpleChange = _.contains(['add-column', 'drop-column', 'rename-column'], change.type);\n\n      const shouldReplaceWithRecreate = isSimpleChange && _.contains(tablesIdentifiersWithColumnDrops, change.newTable.id);\n\n      if (!shouldReplaceWithRecreate) {\n        changes.push(change);\n      }\n    }\n\n    const ids = [];\n\n    for (const drop of columnRenamesAndDrops) {\n      if (!_.contains(ids, drop.newTable.id)) {\n        changes.push(new SchemaChange('recreate-table', {oldTable: drop.oldTable, newTable: drop.newTable}));\n\n        ids.push(drop.newTable.id);\n      }\n    }\n\n    if (this.options.afterTransform) {\n      this.options.afterTransform(changes);\n    }\n\n    return changes;\n  }\n\n  statementForChange(change) {\n    switch (change.type) {\n      case 'create-table':\n        return this.createTable(change);\n      case 'recreate-table':\n        return this.recreateTable(change);\n      case 'drop-table':\n        return this.dropTable(change);\n      case 'add-column':\n        return this.addColumn(change);\n      case 'drop-column':\n        return this.dropColumn(change);\n      case 'rename-column':\n        return this.renameColumn(change);\n      case 'drop-view':\n        return this.dropView(change);\n      case 'create-view':\n        return this.createView(change);\n      case 'create-index':\n        return this.createIndex(change);\n      default:\n        throw new Error('Invalid change type ' + change.type);\n    }\n  }\n\n  escape(identifier) {\n    if (identifier == null || identifier.length === 0) {\n      return '';\n    }\n\n    return '\"' + (identifier.replace(/\"/g, '\"\"')) + '\"';\n  }\n\n  columnDefinition(column) {\n    return this.escape(column.name) + ' ' + this.typeForColumn(column) + this.columnModifiers(column);\n  }\n\n  columnModifiers(column) {\n    return column.allowNull ? '' : ' NOT NULL';\n  }\n\n  columnsForTable(table) {\n    return _.map(table.columns, this.columnDefinition.bind(this));\n  }\n\n  projectionForTable(table) {\n    return _.map(table.columns, function (column) {\n      return column.name;\n    });\n  }\n\n  projectionForView(table) {\n    const definitions = [];\n    const columnNames = {};\n\n    for (const column of table.columns) {\n      let alias = column.name.substring(0, 63);\n\n      if (this.options.viewColumnName) {\n        alias = this.options.viewColumnName(table, column);\n      }\n\n      if (alias == null) {\n        continue;\n      }\n\n      if (!columnNames[alias]) {\n        definitions.push(fmt('%s AS %s', this.escape(column.name), this.escape(alias)));\n        columnNames[alias] = column;\n      }\n    }\n\n    return definitions;\n  }\n\n  mappingForTables(oldTable, newTable) {\n    const mappings = [];\n\n    for (const newColumn of newTable.columns) {\n      const oldColumn = _.find(oldTable.columns, function (column) {\n        return column.id === newColumn.id;\n      });\n\n      if (oldColumn) {\n        mappings.push({\n          oldColumn: oldColumn,\n          newColumn: newColumn\n        });\n      }\n    }\n\n    return mappings;\n  }\n\n  escapedSchema() {\n    if (this.tableSchema == null || this.tableSchema.length === 0) {\n      return '';\n    }\n\n    return this.escape(this.tableSchema) + '.';\n  }\n\n  createTable(change) {\n    return fmt('CREATE TABLE %s (%s);',\n               this.tableName(change.newTable),\n               this.columnsForTable(change.newTable).join(', '));\n  }\n\n  recreateTable(change) {\n    const newTableName = change.newTable.name;\n    const oldTableName = change.oldTable.name;\n\n    const newTemporaryTableName = 'tmp_new_' + newTableName;\n    const oldTemporaryTableName = 'tmp_old_' + oldTableName;\n\n    const parts = [];\n\n    parts.push(this.createTable({newTable: {name: newTemporaryTableName,\n                                            columns: change.newTable.columns}}));\n\n    parts.push(this.insertInto({name: newTemporaryTableName, columns: change.newTable.columns},\n                               change.oldTable));\n\n    parts.push(this.renameTable({oldTable: {name: oldTableName},\n                                 newTable: {name: oldTemporaryTableName}}));\n\n    parts.push(this.renameTable({oldTable: {name: newTemporaryTableName},\n                                 newTable: {name: newTableName}}));\n\n    parts.push(this.dropTable({oldTable: {name: oldTemporaryTableName}}));\n\n    return parts;\n  }\n\n  insertInto(into, from) {\n    const mappings = this.mappingForTables(from, into);\n\n    const newColumns = _.map(mappings, (pair) => {\n      return this.escape(pair.newColumn.name);\n    });\n\n    const oldColumns = _.map(mappings, (column) => {\n      // handle data type changes\n      if (column.oldColumn.type !== 'double' && column.newColumn.type === 'double') {\n        return this.transformToDouble(this.escape(column.oldColumn.name));\n      } else if (column.oldColumn.type === 'double' && column.newColumn.type !== 'double') {\n        return this.transformToText(this.escape(column.oldColumn.name));\n      } else {\n        return this.escape(column.oldColumn.name);\n      }\n    });\n\n    return fmt('INSERT INTO %s (%s) SELECT %s FROM %s;',\n               this.tableName(into),\n               newColumns.join(', '),\n               oldColumns.join(', '),\n               this.tableName(from));\n  }\n\n  renameTable(change) {\n    return fmt('ALTER TABLE %s RENAME TO %s;',\n               this.tableName(change.oldTable),\n               this.escape(this.tablePrefix + change.newTable.name));\n  }\n\n  dropTable(change) {\n    return fmt('DROP TABLE IF EXISTS %s;',\n               this.tableName(change.oldTable));\n  }\n\n  addColumn(change) {\n    return fmt('ALTER TABLE %s ADD COLUMN %s;',\n               this.tableName(change.newTable),\n               this.columnDefinition(change.column));\n  }\n\n  dropColumn(change) {\n    return fmt('ALTER TABLE %s DROP COLUMN %s;',\n               this.tableName(change.newTable),\n               this.escape(change.column));\n  }\n\n  renameColumn(change) {\n    return fmt('ALTER TABLE %s RENAME COLUMN %s TO %s;',\n               this.tableName(change.newTable),\n               this.escape(change.oldColumn.name),\n               this.escape(change.newColumn.name));\n  }\n\n  tableName(table) {\n    return this.escapedSchema() + this.escape(this.tablePrefix + table.name);\n  }\n\n  viewName(table) {\n    return this.escapedSchema() + this.escape(this.tablePrefix + table.name + '_view');\n  }\n\n  indexName(table, columns) {\n    return this.escape('idx_' + this.tablePrefix + table.name + '_' + columns.join('_'));\n  }\n\n  dropView(change) {\n    return fmt('DROP VIEW IF EXISTS %s;', this.viewName(change.oldTable));\n  }\n\n  createView(change) {\n    return fmt('CREATE VIEW IF NOT EXISTS %s AS SELECT %s FROM %s;',\n               this.viewName(change.newTable),\n               this.projectionForView(change.newTable),\n               this.tableName(change.newTable));\n  }\n\n  createIndex(change) {\n    return fmt('CREATE INDEX %s ON %s (%s);',\n               this.indexName(change.newTable, change.columns),\n               this.tableName(change.newTable),\n               change.columns.map(c => this.escape(c)).join(', '));\n  }\n}\n"]}
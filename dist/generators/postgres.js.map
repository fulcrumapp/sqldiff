{"version":3,"sources":["../../src/generators/postgres.js"],"names":["TYPES","pk","string","integer","date","time","double","timestamp","geometry","json","array","boolean","fts","Postgres","SchemaGenerator","typeForColumn","column","type","transformToText","columnName","transformToDouble","transformToDate","primaryKeyName","table","escape","tablePrefix","name","primaryKeySequenceName","primaryKey","columns","primarySequenceKey","createTable","change","tableName","newTable","columnsForTable","concat","join","createIndex","method","indexName","unique","withClause","dropView","viewName","oldView","dropTable","escapedSchema","oldTable","renameTable","parts","push","createView","newView","viewDefinition","projectionForView","clause","insertInto","into","from"],"mappings":"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","sourcesContent":["import SchemaGenerator from '../schema-generator';\nimport { format as fmt } from 'util';\n\n// This function is required in the database\n\n/*\nDROP FUNCTION IF EXISTS FCM_ConvertToFloat(input_value text);\nCREATE OR REPLACE FUNCTION FCM_ConvertToFloat(input_value text)\n  RETURNS double precision AS\n$BODY$\nDECLARE float_value double precision DEFAULT NULL;\nBEGIN\n  BEGIN\n    float_value := input_value::double precision;\n  EXCEPTION WHEN OTHERS THEN\n    RETURN NULL;\n  END;\nRETURN float_value;\nEND;\n$BODY$\nLANGUAGE 'plpgsql' IMMUTABLE STRICT;\n*/\n\nconst TYPES = {\n  pk: 'bigserial NOT NULL',\n  string: 'text',\n  integer: 'bigint',\n  date: 'date',\n  time: 'time without time zone',\n  double: 'double precision',\n  timestamp: 'timestamp with time zone',\n  geometry: 'geometry(Geometry, 4326)',\n  json: 'text',\n  array: 'text[]',\n  boolean: 'boolean',\n  fts: 'tsvector'\n};\n\nexport default class Postgres extends SchemaGenerator {\n  typeForColumn(column) {\n    return TYPES[column.type] || 'text';\n  }\n\n  transformToText(columnName) {\n    return fmt('CAST(%s AS text)', columnName);\n  }\n\n  // alternate:\n  // select '-1.2e10' ~ '^[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?$';\n  transformToDouble(columnName) {\n    return fmt('FCM_ConvertToFloat(%s)', columnName);\n  }\n\n  transformToDate(columnName) {\n    return fmt('FCM_ConvertToDate(%s)', columnName);\n  }\n\n  primaryKeyName(table) {\n    return this.escape(this.tablePrefix + table.name + '_pkey');\n  }\n\n  primaryKeySequenceName(table) {\n    return this.escape(this.tablePrefix + table.name + '_id_seq');\n  }\n\n  primaryKey(table) {\n    if (table.columns[0].type === 'pk') {\n      return fmt('CONSTRAINT %s PRIMARY KEY (%s)',\n        this.primaryKeyName(table),\n        table.columns[0].name);\n    }\n\n    return '';\n  }\n\n  primarySequenceKey(table) {\n    if (table.columns[0].type === 'pk') {\n      return fmt('CONSTRAINT %s PRIMARY KEY (%s)',\n        this.primaryKeyName(table),\n        table.columns[0].name);\n    }\n\n    return '';\n  }\n\n  createTable(change) {\n    return fmt('CREATE TABLE IF NOT EXISTS %s (\\n  %s\\n);',\n      this.tableName(change.newTable),\n      this.columnsForTable(change.newTable).concat(this.primaryKey(change.newTable)).join(',\\n  '));\n  }\n\n  createIndex(change) {\n    const method = change.method || 'btree';\n    const indexName = this.indexName(change.newTable, change.columns);\n    const tableName = this.tableName(change.newTable);\n    const columns = change.columns.join(', ');\n    const unique = change.unique ? 'UNIQUE ' : '';\n    const withClause = method === 'gin' ? ' WITH (fastupdate = off)' : '';\n\n    return fmt('CREATE %sINDEX %s ON %s USING %s (%s)%s;',\n      unique, indexName, tableName, method, columns, withClause);\n  }\n\n  dropView(change) {\n    return fmt('DROP VIEW IF EXISTS %s CASCADE;', this.viewName(change.oldView));\n  }\n\n  dropTable(change) {\n    return fmt('DROP TABLE IF EXISTS %s%s CASCADE;',\n      this.escapedSchema(),\n      this.escape(this.tablePrefix + change.oldTable.name));\n  }\n\n  renameTable(change) {\n    const parts = [ super.renameTable(change) ];\n\n    parts.push(\n      fmt(\n        'ALTER TABLE %s RENAME CONSTRAINT %s TO %s;',\n        this.tableName(change.newTable),\n        this.primaryKeyName(change.oldTable),\n        this.primaryKeyName(change.newTable)\n      )\n    );\n\n    parts.push(\n      fmt(\n        'ALTER SEQUENCE %s RENAME TO %s;',\n        this.escapedSchema() + this.primaryKeySequenceName(change.oldTable),\n        this.primaryKeySequenceName(change.newTable)\n      )\n    );\n\n    return parts;\n  }\n\n  createView(change) {\n    const viewName = this.viewName(change.newView);\n    const tableName = this.tableName(change.newView.table);\n    const viewDefinition = this.projectionForView(change.newView);\n    const clause = change.newView.clause ? ' ' + change.newView.clause : '';\n\n    return fmt(\n      'CREATE OR REPLACE VIEW %s AS\\nSELECT\\n  %s\\nFROM %s%s;',\n      viewName,\n      viewDefinition.join(',\\n  '),\n      tableName,\n      clause\n    );\n  }\n\n  insertInto(into, from) {\n    const parts = [ super.insertInto(into, from) ];\n\n    parts.push(\n      fmt(\n        \"SELECT setval('%s', (SELECT MAX(id) FROM %s));\",\n        this.escapedSchema() + this.primaryKeySequenceName(into),\n        this.tableName(into)\n      )\n    );\n\n    return parts;\n  }\n}\n"],"file":"postgres.js"}
{"version":3,"sources":["../../src/generators/postgres.js"],"names":[],"mappings":"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","file":"postgres.js","sourcesContent":["import SchemaGenerator from '../schema-generator';\nimport {format as fmt} from 'util';\n\n// This function is required in the database\n\n/*\nDROP FUNCTION IF EXISTS FCM_ConvertToFloat(input_value text);\nCREATE OR REPLACE FUNCTION FCM_ConvertToFloat(input_value text)\n  RETURNS double precision AS\n$BODY$\nDECLARE float_value double precision DEFAULT NULL;\nBEGIN\n  BEGIN\n    float_value := input_value::double precision;\n  EXCEPTION WHEN OTHERS THEN\n    RETURN NULL;\n  END;\nRETURN float_value;\nEND;\n$BODY$\nLANGUAGE 'plpgsql' IMMUTABLE STRICT;\n*/\n\nconst TYPES = {\n  pk: 'bigserial NOT NULL',\n  string: 'text',\n  integer: 'bigint',\n  date: 'date',\n  time: 'time without time zone',\n  double: 'double precision',\n  timestamp: 'timestamp with time zone',\n  geometry: 'geometry(Geometry, 4326)',\n  json: 'text',\n  array: 'text[]',\n  boolean: 'boolean',\n  fts: 'tsvector'\n};\n\nexport default class Postgres extends SchemaGenerator {\n  typeForColumn(column) {\n    return TYPES[column.type] || 'text';\n  }\n\n  transformToText(columnName) {\n    return fmt('CAST(%s AS text)', columnName);\n  }\n\n  // alternate:\n  // select '-1.2e10' ~ '^[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?$';\n  transformToDouble(columnName) {\n    return fmt('FCM_ConvertToFloat(%s)', columnName);\n  }\n\n  primaryKeyName(table) {\n    return this.escape(this.tablePrefix + table.name + '_pkey');\n  }\n\n  primaryKeySequenceName(table) {\n    return this.escape(this.tablePrefix + table.name + '_id_seq');\n  }\n\n  primaryKey(table) {\n    if (table.columns[0].type === 'pk') {\n      return fmt('CONSTRAINT %s PRIMARY KEY (%s)',\n                 this.primaryKeyName(table),\n                 table.columns[0].name);\n    }\n\n    return '';\n  }\n\n  primarySequenceKey(table) {\n    if (table.columns[0].type === 'pk') {\n      return fmt('CONSTRAINT %s PRIMARY KEY (%s)',\n                 this.primaryKeyName(table),\n                 table.columns[0].name);\n    }\n\n    return '';\n  }\n\n  createTable(change) {\n    return fmt('CREATE TABLE IF NOT EXISTS %s (\\n  %s\\n);',\n               this.tableName(change.newTable),\n               this.columnsForTable(change.newTable).concat(this.primaryKey(change.newTable)).join(',\\n  '));\n  }\n\n  createIndex(change) {\n    const method = change.method || 'btree';\n    const indexName = this.indexName(change.newTable, change.columns);\n    const tableName = this.tableName(change.newTable);\n    const columns = change.columns.join(', ');\n    const unique = change.unique ? 'UNIQUE ' : '';\n    const withClause = method === 'gin' ? ' WITH (fastupdate = off)' : '';\n\n    return fmt('CREATE %sINDEX %s ON %s USING %s (%s)%s;',\n               unique, indexName, tableName, method, columns, withClause);\n  }\n\n  dropTable(change) {\n    return fmt('DROP TABLE IF EXISTS %s%s CASCADE;',\n               this.escapedSchema(),\n               this.escape(this.tablePrefix + change.oldTable.name));\n  }\n\n  renameTable(change) {\n    const parts = [ super.renameTable(change) ];\n\n    parts.push(fmt('ALTER TABLE %s RENAME CONSTRAINT %s TO %s;',\n                   this.tableName(change.newTable),\n                   this.primaryKeyName(change.oldTable),\n                   this.primaryKeyName(change.newTable)));\n\n    parts.push(fmt('ALTER SEQUENCE %s RENAME TO %s;',\n                   this.escapedSchema() + this.primaryKeySequenceName(change.oldTable),\n                   this.primaryKeySequenceName(change.newTable)));\n\n    return parts;\n  }\n\n  createView(change) {\n    const viewName = this.viewName(change.newView);\n    const tableName = this.tableName(change.newView.table);\n    const viewDefinition = this.projectionForView(change.newView);\n    const clause = change.newView.clause ? ' ' + change.newView.clause : '';\n\n    return fmt('CREATE OR REPLACE VIEW %s AS\\nSELECT\\n  %s\\nFROM %s%s;',\n               viewName, viewDefinition.join(',\\n  '), tableName, clause);\n  }\n\n  insertInto(into, from) {\n    const parts = [ super.insertInto(into, from) ];\n\n    parts.push(fmt(\"SELECT setval('%s', (SELECT MAX(id) FROM %s));\",\n                   this.escapedSchema() + this.primaryKeySequenceName(into),\n                   this.tableName(into)));\n\n    return parts;\n  }\n}\n"]}
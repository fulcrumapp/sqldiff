{"version":3,"sources":["../../src/generators/postgres.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoBA,IAAM,KAAK,GAAG;AACZ,IAAE,EAAE,oBAAoB;AACxB,QAAM,EAAE,MAAM;AACd,SAAO,EAAE,QAAQ;AACjB,MAAI,EAAE,OAAO;AACb,QAAM,EAAE,OAAO;AACf,WAAS,EAAE,6BAA6B;AACxC,UAAQ,EAAE,0BAA0B;AACpC,OAAK,EAAE,QAAQ;AACf,SAAO,EAAE,SAAS;AAClB,KAAG,EAAE,UAAU;CAChB,CAAC;;IAEmB,QAAQ;YAAR,QAAQ;;WAAR,QAAQ;0BAAR,QAAQ;;kEAAR,QAAQ;;;eAAR,QAAQ;;kCACb,MAAM,EAAE;AACpB,aAAO,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,MAAM,CAAC;KACrC;;;oCAEe,UAAU,EAAE;AAC1B,aAAO,UAtCH,MAAM,EAsCC,kBAAkB,EAAE,UAAU,CAAC,CAAC;KAC5C;;;;;;;sCAIiB,UAAU,EAAE;AAC5B,aAAO,UA5CH,MAAM,EA4CC,sBAAsB,EAAE,UAAU,CAAC,CAAC;KAChD;;;gCAEW,MAAM,EAAE;AAClB,UAAM,MAAM,GAAG,MAAM,CAAC,MAAM,IAAI,OAAO,CAAC;AACxC,UAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;AAClE,UAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;AAClD,UAAM,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC1C,UAAM,MAAM,GAAG,MAAM,CAAC,MAAM,GAAG,SAAS,GAAG,EAAE,CAAC;;AAE9C,aAAO,UAtDH,MAAM,EAsDC,wCAAwC,EACxC,MAAM,EAAE,SAAS,EAAE,SAAS,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;KAC3D;;;8BAES,MAAM,EAAE;AAChB,aAAO,UA3DH,MAAM,EA2DC,oCAAoC,EACpC,IAAI,CAAC,aAAa,EAAE,EACpB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;KAClE;;;+BAEU,MAAM,EAAE;AACjB,UAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;AAC/C,UAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;AACvD,UAAM,cAAc,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;AAC9D,UAAM,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,MAAM,GAAG,GAAG,GAAG,MAAM,CAAC,OAAO,CAAC,MAAM,GAAG,EAAE,CAAC;;AAExE,aAAO,UAtEH,MAAM,EAsEC,mDAAmD,EACnD,QAAQ,EAAE,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;KACpE;;;SAxCkB,QAAQ;;;kBAAR,QAAQ","file":"postgres.js","sourcesContent":["import SchemaGenerator from '../schema-generator';\nimport {format as fmt} from 'util';\n\n// This function is required in the database\n\n/*\nCREATE OR REPLACE FUNCTION convert_to_float(input_value text)\nRETURNS FLOAT AS $$\nDECLARE float_value FLOAT DEFAULT NULL;\nBEGIN\n  BEGIN\n    float_value := input_value::float;\n  EXCEPTION WHEN OTHERS THEN\n    RETURN NULL;\n  END;\nRETURN float_value;\nEND;\n$$ LANGUAGE plpgsql;\n*/\n\nconst TYPES = {\n  pk: 'bigserial NOT NULL',\n  string: 'text',\n  integer: 'bigint',\n  date: 'float',\n  double: 'float',\n  timestamp: 'timestamp without time zone',\n  geometry: 'geometry(Geometry, 4326)',\n  array: 'text[]',\n  boolean: 'boolean',\n  fts: 'tsvector'\n};\n\nexport default class Postgres extends SchemaGenerator {\n  typeForColumn(column) {\n    return TYPES[column.type] || 'text';\n  }\n\n  transformToText(columnName) {\n    return fmt('CAST(%s AS text)', columnName);\n  }\n\n  // alternate:\n  // select '-1.2e10' ~ '^[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?$';\n  transformToDouble(columnName) {\n    return fmt('convert_to_float(%s)', columnName);\n  }\n\n  createIndex(change) {\n    const method = change.method || 'btree';\n    const indexName = this.indexName(change.newTable, change.columns);\n    const tableName = this.tableName(change.newTable);\n    const columns = change.columns.join(', ');\n    const unique = change.unique ? 'UNIQUE ' : '';\n\n    return fmt('CREATE %sINDEX %s ON %s USING %s (%s);',\n               unique, indexName, tableName, method, columns);\n  }\n\n  dropTable(change) {\n    return fmt('DROP TABLE IF EXISTS %s%s CASCADE;',\n               this.escapedSchema(),\n               this.escape(this.tablePrefix + change.oldTable.name));\n  }\n\n  createView(change) {\n    const viewName = this.viewName(change.newView);\n    const tableName = this.tableName(change.newView.table);\n    const viewDefinition = this.projectionForView(change.newView);\n    const clause = change.newView.clause ? ' ' + change.newView.clause : '';\n\n    return fmt('CREATE OR REPLACE VIEW %s AS SELECT %s FROM %s%s;',\n               viewName, viewDefinition.join(', '), tableName, clause);\n  }\n}\n"]}
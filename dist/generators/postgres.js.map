{"version":3,"sources":["../../src/generators/postgres.js"],"names":["TYPES","pk","string","integer","date","time","double","timestamp","geometry","json","array","boolean","fts","Postgres","column","type","columnName","table","escape","tablePrefix","name","columns","primaryKeyName","change","tableName","newTable","columnsForTable","concat","primaryKey","join","method","indexName","unique","withClause","viewName","oldView","escapedSchema","oldTable","parts","push","primaryKeySequenceName","newView","viewDefinition","projectionForView","clause","into","from","SchemaGenerator"],"mappings":"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","file":"postgres.js","sourcesContent":["import SchemaGenerator from '../schema-generator';\nimport {format as fmt} from 'util';\n\n// This function is required in the database\n\n/*\nDROP FUNCTION IF EXISTS FCM_ConvertToFloat(input_value text);\nCREATE OR REPLACE FUNCTION FCM_ConvertToFloat(input_value text)\n  RETURNS double precision AS\n$BODY$\nDECLARE float_value double precision DEFAULT NULL;\nBEGIN\n  BEGIN\n    float_value := input_value::double precision;\n  EXCEPTION WHEN OTHERS THEN\n    RETURN NULL;\n  END;\nRETURN float_value;\nEND;\n$BODY$\nLANGUAGE 'plpgsql' IMMUTABLE STRICT;\n*/\n\nconst TYPES = {\n  pk: 'bigserial NOT NULL',\n  string: 'text',\n  integer: 'bigint',\n  date: 'date',\n  time: 'time without time zone',\n  double: 'double precision',\n  timestamp: 'timestamp with time zone',\n  geometry: 'geometry(Geometry, 4326)',\n  json: 'text',\n  array: 'text[]',\n  boolean: 'boolean',\n  fts: 'tsvector'\n};\n\nexport default class Postgres extends SchemaGenerator {\n  typeForColumn(column) {\n    return TYPES[column.type] || 'text';\n  }\n\n  transformToText(columnName) {\n    return fmt('CAST(%s AS text)', columnName);\n  }\n\n  // alternate:\n  // select '-1.2e10' ~ '^[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?$';\n  transformToDouble(columnName) {\n    return fmt('FCM_ConvertToFloat(%s)', columnName);\n  }\n\n  primaryKeyName(table) {\n    return this.escape(this.tablePrefix + table.name + '_pkey');\n  }\n\n  primaryKeySequenceName(table) {\n    return this.escape(this.tablePrefix + table.name + '_id_seq');\n  }\n\n  primaryKey(table) {\n    if (table.columns[0].type === 'pk') {\n      return fmt('CONSTRAINT %s PRIMARY KEY (%s)',\n                 this.primaryKeyName(table),\n                 table.columns[0].name);\n    }\n\n    return '';\n  }\n\n  primarySequenceKey(table) {\n    if (table.columns[0].type === 'pk') {\n      return fmt('CONSTRAINT %s PRIMARY KEY (%s)',\n                 this.primaryKeyName(table),\n                 table.columns[0].name);\n    }\n\n    return '';\n  }\n\n  createTable(change) {\n    return fmt('CREATE TABLE IF NOT EXISTS %s (\\n  %s\\n);',\n               this.tableName(change.newTable),\n               this.columnsForTable(change.newTable).concat(this.primaryKey(change.newTable)).join(',\\n  '));\n  }\n\n  createIndex(change) {\n    const method = change.method || 'btree';\n    const indexName = this.indexName(change.newTable, change.columns);\n    const tableName = this.tableName(change.newTable);\n    const columns = change.columns.join(', ');\n    const unique = change.unique ? 'UNIQUE ' : '';\n    const withClause = method === 'gin' ? ' WITH (fastupdate = off)' : '';\n\n    return fmt('CREATE %sINDEX %s ON %s USING %s (%s)%s;',\n               unique, indexName, tableName, method, columns, withClause);\n  }\n\n  dropView(change) {\n    return fmt('DROP VIEW IF EXISTS %s CASCADE;', this.viewName(change.oldView));\n  }\n\n  dropTable(change) {\n    return fmt('DROP TABLE IF EXISTS %s%s CASCADE;',\n               this.escapedSchema(),\n               this.escape(this.tablePrefix + change.oldTable.name));\n  }\n\n  renameTable(change) {\n    const parts = [ super.renameTable(change) ];\n\n    parts.push(fmt('ALTER TABLE %s RENAME CONSTRAINT %s TO %s;',\n                   this.tableName(change.newTable),\n                   this.primaryKeyName(change.oldTable),\n                   this.primaryKeyName(change.newTable)));\n\n    parts.push(fmt('ALTER SEQUENCE %s RENAME TO %s;',\n                   this.escapedSchema() + this.primaryKeySequenceName(change.oldTable),\n                   this.primaryKeySequenceName(change.newTable)));\n\n    return parts;\n  }\n\n  createView(change) {\n    const viewName = this.viewName(change.newView);\n    const tableName = this.tableName(change.newView.table);\n    const viewDefinition = this.projectionForView(change.newView);\n    const clause = change.newView.clause ? ' ' + change.newView.clause : '';\n\n    return fmt('CREATE OR REPLACE VIEW %s AS\\nSELECT\\n  %s\\nFROM %s%s;',\n               viewName, viewDefinition.join(',\\n  '), tableName, clause);\n  }\n\n  insertInto(into, from) {\n    const parts = [ super.insertInto(into, from) ];\n\n    parts.push(fmt(\"SELECT setval('%s', (SELECT MAX(id) FROM %s));\",\n                   this.escapedSchema() + this.primaryKeySequenceName(into),\n                   this.tableName(into)));\n\n    return parts;\n  }\n}\n"]}
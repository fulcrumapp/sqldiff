{"version":3,"sources":["../../src/generators/mssql.js"],"names":["TYPES","pk","string","integer","date","time","timestamp","geometry","json","array","fts","MSSQL","escape","identifier","length","unescape","replace","typeForColumn","column","type","test","name","transformToText","columnName","transformToDouble","transformToDate","createTable","change","tableName","newTable","columnsForTable","join","addColumn","columnDefinition","createView","whereClause","newView","filter","parts","Object","keys","field","push","viewName","projectionForView","table","createIndex","method","indexName","columns","map","c","unique","spatial","dropView","escapedSchema","tablePrefix","oldView","dropTable","oldTable","renameTable","renameColumn","oldColumn","newColumn","insertInto","into","from","SchemaGenerator"],"mappings":"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","sourcesContent":["import SchemaGenerator from '../schema-generator';\nimport { format as fmt } from 'util';\n\nconst TYPES = {\n  pk: 'bigint NOT NULL IDENTITY(1,1) PRIMARY KEY',\n  string: 'varchar(max)',\n  integer: 'bigint',\n  date: 'date',\n  time: 'time',\n  double: 'float',\n  timestamp: 'datetime',\n  geometry: 'geography',\n  json: 'varchar(max)',\n  array: 'varchar(max)',\n  boolean: 'bit',\n  fts: 'varchar(max)'\n};\n\nexport default class MSSQL extends SchemaGenerator {\n  escape(identifier) {\n    if (identifier == null || identifier.length === 0) {\n      return '';\n    }\n\n    return '[' + identifier + ']';\n  }\n\n  unescape(identifier) {\n    return identifier.replace(/[[\\]]/g, '');\n  }\n\n  typeForColumn(column) {\n    if (column.type === 'string') {\n      if (/_id$/.test(column.name) || column.length != null) {\n        return 'varchar(' + (column.length || '100') + ')';\n      }\n    }\n\n    return TYPES[column.type] || 'varchar(max)';\n  }\n\n  transformToText(columnName) {\n    return fmt('CAST(%s AS varchar(max))', columnName);\n  }\n\n  transformToDouble(columnName) {\n    return fmt('TRY_PARSE(%s AS float)', columnName);\n  }\n\n  transformToDate(columnName) {\n    return fmt('TRY_CAST(%s AS date)', columnName);\n  }\n\n  createTable(change) {\n    return fmt('CREATE TABLE %s (\\n  %s\\n);',\n      this.tableName(change.newTable),\n      this.columnsForTable(change.newTable).join(',\\n  '));\n  }\n\n  addColumn(change) {\n    return fmt('ALTER TABLE %s ADD %s;',\n      this.tableName(change.newTable),\n      this.columnDefinition(change.column));\n  }\n\n  createView(change) {\n    let whereClause = '';\n\n    if (change.newView.filter) {\n      const parts = [];\n\n      for (const field of Object.keys(change.newView.filter)) {\n        parts.push(this.escape(field) + \" = '\" + change.newView.filter[field] + \"'\");\n      }\n\n      whereClause = ' WHERE ' + parts.join(' AND ');\n    }\n\n    return fmt('CREATE VIEW %s AS\\nSELECT\\n  %s\\nFROM %s%s;',\n      this.viewName(change.newView),\n      this.projectionForView(change.newView).join(',\\n  '),\n      this.tableName(change.newView.table),\n      whereClause);\n  }\n\n  createIndex(change) {\n    const method = change.method || 'btree';\n    const indexName = this.indexName(change.newTable, change.columns);\n    const tableName = this.tableName(change.newTable);\n    const columns = change.columns.map(c => this.escape(c)).join(', ');\n    const unique = change.unique ? 'UNIQUE ' : '';\n\n    const spatial = method === 'spatial' ? ' SPATIAL' : '';\n\n    return fmt('CREATE%s %sINDEX %s ON %s (%s);',\n      spatial, unique, indexName, tableName, columns);\n  }\n\n  dropView(change) {\n    return fmt(\n      \"IF OBJECT_ID('%s%s', 'V') IS NOT NULL DROP VIEW %s%s;\",\n      this.escapedSchema(),\n      this.escape(this.tablePrefix + change.oldView.name),\n      this.escapedSchema(),\n      this.escape(this.tablePrefix + change.oldView.name)\n    );\n  }\n\n  dropTable(change) {\n    return fmt(\n      \"IF OBJECT_ID('%s%s', 'U') IS NOT NULL DROP TABLE %s%s;\",\n      this.escapedSchema(),\n      this.escape(this.tablePrefix + change.oldTable.name),\n      this.escapedSchema(),\n      this.escape(this.tablePrefix + change.oldTable.name)\n    );\n  }\n\n  renameTable(change) {\n    return fmt(\n      'EXEC sp_rename \\'%s\\', \\'%s\\', \\'OBJECT\\';',\n      this.unescape(this.tableName(change.oldTable)),\n      this.tablePrefix + change.newTable.name\n    );\n  }\n\n  renameColumn(change) {\n    return fmt(\n      'EXEC sp_rename \\'%s\\', \\'%s\\', \\'COLUMN\\';',\n      [this.unescape(this.tableName(change.newTable)), change.oldColumn.name].join('.'),\n      change.newColumn.name\n    );\n  }\n\n  insertInto(into, from) {\n    const parts = [\n      fmt('SET IDENTITY_INSERT %s ON;', this.tableName(into)),\n      super.insertInto(into, from),\n      fmt('SET IDENTITY_INSERT %s OFF;', this.tableName(into)),\n      fmt('DBCC CHECKIDENT (\\'%s\\');', this.tableName(into))\n    ];\n\n    return parts;\n  }\n}\n"],"file":"mssql.js"}
{"version":3,"sources":["../../src/generators/mssql.js"],"names":[],"mappings":"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","file":"mssql.js","sourcesContent":["import SchemaGenerator from '../schema-generator';\nimport {format as fmt} from 'util';\n\nconst TYPES = {\n  pk: 'bigint NOT NULL IDENTITY(1,1) PRIMARY KEY',\n  string: 'varchar(max)',\n  integer: 'bigint',\n  date: 'date',\n  time: 'time',\n  double: 'float',\n  timestamp: 'datetime',\n  geometry: 'geography',\n  json: 'varchar(max)',\n  array: 'varchar(max)',\n  boolean: 'bit',\n  fts: 'varchar(max)'\n};\n\nexport default class MSSQL extends SchemaGenerator {\n  escape(identifier) {\n    if (identifier == null || identifier.length === 0) {\n      return '';\n    }\n\n    return '[' + identifier + ']';\n  }\n\n  typeForColumn(column) {\n    if (column.type === 'string') {\n      if (/_id$/.test(column.name) || column.length != null) {\n        return 'varchar(' + (column.length || '100') + ')';\n      }\n\n      // TODO(zhm) hacks\n      if (column.name === 'text_value' || column.name === 'key') {\n        return 'varchar(800)';\n      }\n    }\n\n    return TYPES[column.type] || 'varchar(max)';\n  }\n\n  transformToText(columnName) {\n    return fmt('CAST(%s AS text)', columnName);\n  }\n\n  transformToDouble(columnName) {\n    return fmt('IIF(ISNUMERIC(%s), %s, NULL)', columnName, columnName);\n  }\n\n  createTable(change) {\n    return fmt('CREATE TABLE %s (\\n  %s\\n);',\n               this.tableName(change.newTable),\n               this.columnsForTable(change.newTable).join(',\\n  '));\n  }\n\n  createView(change) {\n    let whereClause = '';\n\n    if (change.newView.filter) {\n      const parts = [];\n\n      for (const field of Object.keys(change.newView.filter)) {\n        parts.push(this.escape(field) + \" = '\" + change.newView.filter[field] + \"'\");\n      }\n\n      whereClause = ' WHERE ' + parts.join(' AND ');\n    }\n\n    return fmt('CREATE VIEW %s AS\\nSELECT\\n  %s\\nFROM %s%s;',\n               this.viewName(change.newView),\n               this.projectionForView(change.newView).join(',\\n  '),\n               this.tableName(change.newView.table),\n               whereClause);\n  }\n\n  createIndex(change) {\n    const method = change.method || 'btree';\n    const indexName = this.indexName(change.newTable, change.columns);\n    const tableName = this.tableName(change.newTable);\n    const columns = change.columns.map(c => this.escape(c)).join(', ');\n    const unique = change.unique ? 'UNIQUE ' : '';\n    // const withClause = method === 'gin' ? ' WITH (fastupdate = off)' : '';\n\n    const spatial = method === 'spatial' ? ' SPATIAL' : '';\n\n    return fmt('CREATE%s %sINDEX %s ON %s (%s);',\n               spatial, unique, indexName, tableName, columns);\n  }\n\n  dropTable(change) {\n    return fmt('DROP TABLE IF EXISTS %s%s;',\n               this.escapedSchema(),\n               this.escape(this.tablePrefix + change.oldTable.name));\n  }\n\n  insertInto(into, from) {\n    const parts = [ super.insertInto(into, from) ];\n\n    // parts.push(fmt(\"SELECT setval('%s', (SELECT MAX(id) FROM %s));\",\n    //                this.escapedSchema() + this.primaryKeySequenceName(into),\n    //                this.tableName(into)));\n\n    return parts;\n  }\n}\n"]}
{"version":3,"sources":["../../src/generators/mssql.js"],"names":["TYPES","pk","string","integer","date","time","double","timestamp","geometry","json","array","boolean","fts","MSSQL","identifier","length","column","type","test","name","columnName","change","tableName","newTable","columnsForTable","join","whereClause","newView","filter","parts","Object","keys","field","push","escape","viewName","projectionForView","table","method","indexName","columns","map","c","unique","spatial","escapedSchema","tablePrefix","oldTable","replace","into","from","SchemaGenerator"],"mappings":"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","file":"mssql.js","sourcesContent":["import SchemaGenerator from '../schema-generator';\nimport {format as fmt} from 'util';\n\nconst TYPES = {\n  pk: 'bigint NOT NULL IDENTITY(1,1) PRIMARY KEY',\n  string: 'varchar(max)',\n  integer: 'bigint',\n  date: 'date',\n  time: 'time',\n  double: 'float',\n  timestamp: 'datetime',\n  geometry: 'geography',\n  json: 'varchar(max)',\n  array: 'varchar(max)',\n  boolean: 'bit',\n  fts: 'varchar(max)'\n};\n\nexport default class MSSQL extends SchemaGenerator {\n  escape(identifier) {\n    if (identifier == null || identifier.length === 0) {\n      return '';\n    }\n\n    return '[' + identifier + ']';\n  }\n\n  typeForColumn(column) {\n    if (column.type === 'string') {\n      if (/_id$/.test(column.name) || column.length != null) {\n        return 'varchar(' + (column.length || '100') + ')';\n      }\n    }\n\n    return TYPES[column.type] || 'varchar(max)';\n  }\n\n  transformToText(columnName) {\n    return fmt('CAST(%s AS varchar(max))', columnName);\n  }\n\n  transformToDouble(columnName) {\n    return fmt('IIF(ISNUMERIC(%s), %s, NULL)', columnName, columnName);\n  }\n\n  createTable(change) {\n    return fmt('CREATE TABLE %s (\\n  %s\\n);',\n               this.tableName(change.newTable),\n               this.columnsForTable(change.newTable).join(',\\n  '));\n  }\n\n  createView(change) {\n    let whereClause = '';\n\n    if (change.newView.filter) {\n      const parts = [];\n\n      for (const field of Object.keys(change.newView.filter)) {\n        parts.push(this.escape(field) + \" = '\" + change.newView.filter[field] + \"'\");\n      }\n\n      whereClause = ' WHERE ' + parts.join(' AND ');\n    }\n\n    return fmt('CREATE VIEW %s AS\\nSELECT\\n  %s\\nFROM %s%s;',\n               this.viewName(change.newView),\n               this.projectionForView(change.newView).join(',\\n  '),\n               this.tableName(change.newView.table),\n               whereClause);\n  }\n\n  createIndex(change) {\n    const method = change.method || 'btree';\n    const indexName = this.indexName(change.newTable, change.columns);\n    const tableName = this.tableName(change.newTable);\n    const columns = change.columns.map(c => this.escape(c)).join(', ');\n    const unique = change.unique ? 'UNIQUE ' : '';\n    // const withClause = method === 'gin' ? ' WITH (fastupdate = off)' : '';\n\n    const spatial = method === 'spatial' ? ' SPATIAL' : '';\n\n    return fmt('CREATE%s %sINDEX %s ON %s (%s);',\n               spatial, unique, indexName, tableName, columns);\n  }\n\n  dropTable(change) {\n    return fmt('DROP TABLE IF EXISTS %s%s;',\n               this.escapedSchema(),\n               this.escape(this.tablePrefix + change.oldTable.name));\n  }\n\n  renameTable(change) {\n    return fmt('EXEC sp_rename \\'%s\\', \\'%s\\', \\'OBJECT\\';',\n       this.tableName(change.oldTable).replace(/[\\[\\]]/g, ''),\n       this.tablePrefix + change.newTable.name);\n  }\n\n  insertInto(into, from) {\n    const parts = [\n      fmt('SET IDENTITY_INSERT %s ON;', this.tableName(into)),\n      super.insertInto(into, from),\n      fmt('SET IDENTITY_INSERT %s OFF;', this.tableName(into)),\n      fmt('DBCC CHECKIDENT (\\'%s\\');', this.tableName(into))\n    ];\n\n    return parts;\n  }\n}\n"]}
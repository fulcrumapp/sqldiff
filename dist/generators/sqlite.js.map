{"version":3,"sources":["../../src/generators/sqlite.js"],"names":["TYPES","pk","string","integer","date","time","double","array","json","boolean","timestamp","SQLite","SchemaGenerator","typeForColumn","column","type","transformToText","columnName","transformToDate","transformToDouble","createIndex","change","unique","indexName","newTable","columns","tableName","join","escape","identifier","length"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA,MAAMA,KAAK,GAAG;AACZC,EAAAA,EAAE,EAAE,mCADQ;AAEZC,EAAAA,MAAM,EAAE,MAFI;AAGZC,EAAAA,OAAO,EAAE,SAHG;AAIZC,EAAAA,IAAI,EAAE,MAJM;AAKZC,EAAAA,IAAI,EAAE,MALM;AAMZC,EAAAA,MAAM,EAAE,MANI;AAOZC,EAAAA,KAAK,EAAE,MAPK;AAQZC,EAAAA,IAAI,EAAE,MARM;AASZC,EAAAA,OAAO,EAAE,SATG;AAUZC,EAAAA,SAAS,EAAE;AAVC,CAAd;;AAae,MAAMC,MAAN,SAAqBC,wBAArB,CAAqC;AAClDC,EAAAA,aAAa,CAACC,MAAD,EAAS;AACpB,WAAOd,KAAK,CAACc,MAAM,CAACC,IAAR,CAAL,IAAsB,MAA7B;AACD;;AAEDC,EAAAA,eAAe,CAACC,UAAD,EAAa;AAC1B,WAAO,kBAAI,kBAAJ,EAAwBA,UAAxB,CAAP;AACD;;AAEDC,EAAAA,eAAe,CAACD,UAAD,EAAa;AAC1B,WAAO,KAAKD,eAAL,CAAqBC,UAArB,CAAP;AACD;;AAEDE,EAAAA,iBAAiB,CAACF,UAAD,EAAa;AAC5B,WAAO,kBACL,WACA,sCADA,GAEA,gCAFA,GAGA,wFAHA,GAIA,wBAJA,GAKA,MANK,EAOLA,UAPK,EAOOA,UAPP,EAOmBA,UAPnB,EAO+BA,UAP/B,CAAP;AASD;;AAEDG,EAAAA,WAAW,CAACC,MAAD,EAAS;AAClB,UAAMC,MAAM,GAAGD,MAAM,CAACC,MAAP,GAAgB,SAAhB,GAA4B,EAA3C;AAEA,WAAO,kBACL,6CADK,EAELA,MAFK,EAGL,KAAKC,SAAL,CAAeF,MAAM,CAACG,QAAtB,EAAgCH,MAAM,CAACI,OAAvC,CAHK,EAIL,KAAKC,SAAL,CAAeL,MAAM,CAACG,QAAtB,CAJK,EAKLH,MAAM,CAACI,OAAP,CAAeE,IAAf,CAAoB,IAApB,CALK,CAAP;AAOD;;AAEDC,EAAAA,MAAM,CAACC,UAAD,EAAa;AACjB,QAAIA,UAAU,IAAI,IAAd,IAAsBA,UAAU,CAACC,MAAX,KAAsB,CAAhD,EAAmD;AACjD,aAAO,EAAP;AACD;;AAED,WAAO,MAAMD,UAAN,GAAmB,GAA1B;AACD;;AA3CiD","sourcesContent":["import SchemaGenerator from '../schema-generator';\nimport { format as fmt} from 'util';\n\nconst TYPES = {\n  pk: 'INTEGER PRIMARY KEY AUTOINCREMENT',\n  string: 'TEXT',\n  integer: 'INTEGER',\n  date: 'REAL',\n  time: 'REAL',\n  double: 'REAL',\n  array: 'TEXT',\n  json: 'TEXT',\n  boolean: 'INTEGER',\n  timestamp: 'REAL'\n};\n\nexport default class SQLite extends SchemaGenerator {\n  typeForColumn(column) {\n    return TYPES[column.type] || 'TEXT';\n  }\n\n  transformToText(columnName) {\n    return fmt('CAST(%s AS text)', columnName);\n  }\n\n  transformToDate(columnName) {\n    return this.transformToText(columnName);\n  }\n\n  transformToDouble(columnName) {\n    return fmt(\n      '(CASE ' +\n      'WHEN LENGTH(TRIM(%s)) = 0 THEN NULL ' +\n      'WHEN CAST(%s AS REAL) = 0 AND ' +\n      \"LENGTH(TRIM(REPLACE(REPLACE(REPLACE(%s, '.', ''), '0', ' '), '-', ''))) > 0 THEN NULL \" +\n      'ELSE CAST(%s AS REAL) ' +\n      'END)',\n      columnName, columnName, columnName, columnName\n    );\n  }\n\n  createIndex(change) {\n    const unique = change.unique ? 'UNIQUE ' : '';\n\n    return fmt(\n      'CREATE %sINDEX IF NOT EXISTS %s ON %s (%s);',\n      unique,\n      this.indexName(change.newTable, change.columns),\n      this.tableName(change.newTable),\n      change.columns.join(', ')\n    );\n  }\n\n  escape(identifier) {\n    if (identifier == null || identifier.length === 0) {\n      return '';\n    }\n\n    return '`' + identifier + '`';\n  }\n}\n"],"file":"sqlite.js"}
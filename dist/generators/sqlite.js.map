{"version":3,"sources":["../../src/generators/sqlite.js"],"names":["TYPES","pk","string","integer","date","time","double","array","json","boolean","timestamp","Sqlite","column","type","columnName","change","unique","indexName","newTable","columns","tableName","join","identifier","length","SchemaGenerator"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;;;AAEA,IAAMA,QAAQ;AACZC,MAAI,mCADQ;AAEZC,UAAQ,MAFI;AAGZC,WAAS,SAHG;AAIZC,QAAM,MAJM;AAKZC,QAAM,MALM;AAMZC,UAAQ,MANI;AAOZC,SAAO,MAPK;AAQZC,QAAM,MARM;AASZC,WAAS,SATG;AAUZC,aAAW;AAVC,CAAd;;IAaqBC,M;;;;;;;;;;;kCACLC,M,EAAQ;AACpB,aAAOZ,MAAMY,OAAOC,IAAb,KAAsB,MAA7B;AACD;;;oCAEeC,U,EAAY;AAC1B,aAAO,kBAAI,kBAAJ,EAAwBA,UAAxB,CAAP;AACD;;;sCAEiBA,U,EAAY;AAC5B,aAAO,kBAAI,WACA,sCADA,GAEA,gCAFA,GAGA,wFAHA,GAIA,wBAJA,GAKA,MALJ,EAMIA,UANJ,EAMgBA,UANhB,EAM4BA,UAN5B,EAMwCA,UANxC,CAAP;AAOD;;;gCAEWC,M,EAAQ;AAClB,UAAMC,SAASD,OAAOC,MAAP,GAAgB,SAAhB,GAA4B,EAA3C;;AAEA,aAAO,kBAAI,6CAAJ,EACIA,MADJ,EAEI,KAAKC,SAAL,CAAeF,OAAOG,QAAtB,EAAgCH,OAAOI,OAAvC,CAFJ,EAGI,KAAKC,SAAL,CAAeL,OAAOG,QAAtB,CAHJ,EAIIH,OAAOI,OAAP,CAAeE,IAAf,CAAoB,IAApB,CAJJ,CAAP;AAKD;;;2BAEMC,U,EAAY;AACjB,UAAIA,cAAc,IAAd,IAAsBA,WAAWC,MAAX,KAAsB,CAAhD,EAAmD;AACjD,eAAO,EAAP;AACD;;AAED,aAAO,MAAMD,UAAN,GAAmB,GAA1B;AACD;;;;EAnCiCE,yB;;kBAAfb,M","file":"sqlite.js","sourcesContent":["import SchemaGenerator from '../schema-generator';\nimport {format as fmt} from 'util';\n\nconst TYPES = {\n  pk: 'INTEGER PRIMARY KEY AUTOINCREMENT',\n  string: 'TEXT',\n  integer: 'INTEGER',\n  date: 'REAL',\n  time: 'REAL',\n  double: 'REAL',\n  array: 'TEXT',\n  json: 'TEXT',\n  boolean: 'INTEGER',\n  timestamp: 'REAL'\n};\n\nexport default class Sqlite extends SchemaGenerator {\n  typeForColumn(column) {\n    return TYPES[column.type] || 'TEXT';\n  }\n\n  transformToText(columnName) {\n    return fmt('CAST(%s AS text)', columnName);\n  }\n\n  transformToDouble(columnName) {\n    return fmt('(CASE ' +\n               'WHEN LENGTH(TRIM(%s)) = 0 THEN NULL ' +\n               'WHEN CAST(%s AS REAL) = 0 AND ' +\n               \"LENGTH(TRIM(REPLACE(REPLACE(REPLACE(%s, '.', ''), '0', ' '), '-', ''))) > 0 THEN NULL \" +\n               'ELSE CAST(%s AS REAL) ' +\n               'END)',\n               columnName, columnName, columnName, columnName);\n  }\n\n  createIndex(change) {\n    const unique = change.unique ? 'UNIQUE ' : '';\n\n    return fmt('CREATE %sINDEX IF NOT EXISTS %s ON %s (%s);',\n               unique,\n               this.indexName(change.newTable, change.columns),\n               this.tableName(change.newTable),\n               change.columns.join(', '));\n  }\n\n  escape(identifier) {\n    if (identifier == null || identifier.length === 0) {\n      return '';\n    }\n\n    return '`' + identifier + '`';\n  }\n}\n"]}
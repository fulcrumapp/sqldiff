{"version":3,"sources":["../../src/generators/sqlite.js"],"names":[],"mappings":";;;;;;;;;;;;;;AAGA,MAAM,KAAK,GAAG;AACZ,IAAE,EAAE,mCAAmC;AACvC,QAAM,EAAE,MAAM;AACd,SAAO,EAAE,SAAS;AAClB,MAAI,EAAE,MAAM;AACZ,QAAM,EAAE,MAAM;AACd,OAAK,EAAE,MAAM;AACb,WAAS,EAAE,MAAM;CAClB,CAAC;;AAEa,MAAM,MAAM,mCAAyB;AAClD,eAAa,CAAC,MAAM,EAAE;AACpB,WAAO,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,MAAM,CAAC;GACrC;;AAED,iBAAe,CAAC,UAAU,EAAE;AAC1B,WAAO,UAlBH,MAAM,EAkBC,kBAAkB,EAAE,UAAU,CAAC,CAAC;GAC5C;;AAED,mBAAiB,CAAC,UAAU,EAAE;AAC5B,WAAO,UAtBH,MAAM,EAsBC,QAAQ,GACR,sCAAsC,GACtC,gCAAgC,GAChC,wFAAwF,GACxF,wBAAwB,GACxB,MAAM,EACN,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;GAC5D;;AAED,aAAW,CAAC,MAAM,EAAE;AAClB,WAAO,UAhCH,MAAM,EAgCC,2CAA2C,EAC3C,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC,OAAO,CAAC,EAC/C,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,EAC/B,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;GACvC;;AAED,QAAM,CAAC,UAAU,EAAE;AACjB,QAAI,UAAU,IAAI,IAAI,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE;AACjD,aAAO,EAAE,CAAC;KACX;;AAED,WAAO,GAAG,GAAG,UAAU,GAAG,GAAG,CAAC;GAC/B;CACF;kBAjCoB,MAAM","file":"sqlite.js","sourcesContent":["import SchemaGenerator from '../schema-generator';\nimport {format as fmt} from 'util';\n\nconst TYPES = {\n  pk: 'INTEGER PRIMARY KEY AUTOINCREMENT',\n  string: 'TEXT',\n  integer: 'INTEGER',\n  date: 'REAL',\n  double: 'REAL',\n  array: 'TEXT',\n  timestamp: 'REAL'\n};\n\nexport default class Sqlite extends SchemaGenerator {\n  typeForColumn(column) {\n    return TYPES[column.type] || 'TEXT';\n  }\n\n  transformToText(columnName) {\n    return fmt('CAST(%s AS text)', columnName);\n  }\n\n  transformToDouble(columnName) {\n    return fmt('(CASE ' +\n               'WHEN LENGTH(TRIM(%s)) = 0 THEN NULL ' +\n               'WHEN CAST(%s AS REAL) = 0 AND ' +\n               \"LENGTH(TRIM(REPLACE(REPLACE(REPLACE(%s, '.', ''), '0', ' '), '-', ''))) > 0 THEN NULL \" +\n               'ELSE CAST(%s AS REAL) ' +\n               'END)',\n               columnName, columnName, columnName, columnName);\n  }\n\n  createIndex(change) {\n    return fmt('CREATE INDEX IF NOT EXISTS %s ON %s (%s);',\n               this.indexName(change.newTable, change.columns),\n               this.tableName(change.newTable),\n               change.columns.join(', '));\n  }\n\n  escape(identifier) {\n    if (identifier == null || identifier.length === 0) {\n      return '';\n    }\n\n    return '`' + identifier + '`';\n  }\n}\n"]}
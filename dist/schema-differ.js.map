{"version":3,"sources":["../src/schema-differ.js"],"names":["SchemaDiff","constructor","oldSchema","newSchema","diff","changes","diffTables","diffColumns","diffViews","diffViewColumns","rawChanges","slice","conflate","addChange","type","params","push","SchemaChange","newTables","tables","oldTables","oldTable","newTable","t","id","name","recreates","change","ids","isSimpleChange","isTableAlreadyBeingRecreated","tablesPairsForColumnDiff","pairs","map","pair","viewPairsForColumnDiff","views","newView","oldView","tablePairs","recreatedTableIdentifiers","oldColumns","columns","newColumns","oldIndex","length","oldColumn","exists","newIndex","newColumn","isEqualTo","column","newViews","oldViews","viewPairs","recreatedViewIdentifiers","needsRebuild","alias"],"mappings":"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","sourcesContent":["import { find, select, map, reject, contains, filter } from 'underscore';\nimport SchemaChange from './schema-change';\n\nexport default class SchemaDiff {\n  constructor(oldSchema, newSchema) {\n    this.oldSchema = oldSchema;\n    this.newSchema = newSchema;\n  }\n\n  diff() {\n    this.changes = [];\n\n    this.diffTables();\n\n    this.diffColumns();\n\n    this.diffViews();\n\n    this.diffViewColumns();\n\n    this.rawChanges = this.changes.slice();\n\n    this.conflate();\n\n    return this.changes;\n  }\n\n  addChange(type, params) {\n    this.changes.push(new SchemaChange(type, params));\n  }\n\n  diffTables() {\n    const newTables = this.newSchema ? this.newSchema.tables : null;\n    const oldTables = this.oldSchema ? this.oldSchema.tables : null;\n\n    if (this.oldSchema) {\n      for (const oldTable of this.oldSchema.tables) {\n        let newTable = null;\n\n        if (newTables) {\n          newTable = find(newTables, (t) => t.id === oldTable.id);\n        }\n\n        if (newTable) {\n          if (newTable.name !== oldTable.name) {\n            this.addChange('rename-table', { oldTable: oldTable, newTable: newTable });\n          }\n        } else {\n          this.addChange('drop-table', { oldTable: oldTable });\n        }\n      }\n    }\n\n    if (this.newSchema) {\n      for (const newTable of this.newSchema.tables) {\n        let oldTable = null;\n\n        if (oldTables) {\n          oldTable = find(oldTables, (t) => t.id === newTable.id);\n        }\n\n        if (!oldTable) {\n          this.addChange('create-table', { newTable: newTable });\n        }\n      }\n    }\n  }\n\n  conflate() {\n    // if we're re-creating a table, we don't need to rename, drop, or add any new columns because\n    // the recreate handles all of those.\n    const recreates = select(this.changes, change => change.type === 'recreate-table');\n\n    const ids = map(recreates, change => change.newTable.id);\n\n    this.changes = reject(this.changes, change => {\n      const isSimpleChange = contains([ 'rename-column', 'drop-column', 'add-column' ], change.type);\n\n      let isTableAlreadyBeingRecreated = false;\n\n      if (change.newTable) {\n        isTableAlreadyBeingRecreated = contains(ids, change.newTable.id);\n      }\n\n      return isSimpleChange && isTableAlreadyBeingRecreated;\n    });\n  }\n\n  get tablesPairsForColumnDiff() {\n    // only tables that exist in the old and new schemas should be diff'd for columns\n    let pairs = [];\n\n    if (this.newSchema) {\n      pairs = this.newSchema.tables.map((newTable) => {\n        let oldTable = null;\n\n        if (this.oldSchema) {\n          oldTable = find(this.oldSchema.tables, (t) => t.id === newTable.id);\n        }\n\n        return { oldTable: oldTable, newTable: newTable };\n      });\n    }\n\n    // only process column-level changes on tables that exist already\n    pairs = filter(pairs, pair => {\n      return pair.oldTable && pair.newTable && pair.oldTable.id === pair.newTable.id;\n    });\n\n    return pairs;\n  }\n\n  get viewPairsForColumnDiff() {\n    // only views that exist in the old and new schemas should be diff'd\n    let pairs = [];\n\n    if (this.newSchema && this.newSchema.views) {\n      pairs = this.newSchema.views.map((newView) => {\n        let oldView = null;\n\n        if (this.oldSchema) {\n          oldView = find(this.oldSchema.views, (t) => t.id === newView.id);\n        }\n\n        return { oldView: oldView, newView: newView };\n      });\n    }\n\n    // only process column-level changes on views that exist already\n    pairs = filter(pairs, (pair) => {\n      return pair.oldView && pair.newView && pair.oldView.id === pair.newView.id;\n    });\n\n    return pairs;\n  }\n\n  diffColumns() {\n    const tablePairs = this.tablesPairsForColumnDiff;\n\n    // Some changes (like column re-ordering) require completely recreating the table.\n    // Track the tables we've determined need to be re-created so we don't re-create\n    // it multiple times for multiple column re-orderings on the same table.\n    const recreatedTableIdentifiers = [];\n\n    for (const pair of tablePairs) {\n      const oldColumns = pair.oldTable ? pair.oldTable.columns : [];\n      const newColumns = pair.newTable ? pair.newTable.columns : [];\n\n      for (let oldIndex = 0; oldIndex < oldColumns.length; ++oldIndex) {\n        const oldColumn = oldColumns[oldIndex];\n\n        let exists = false;\n\n        for (let newIndex = 0; newIndex < newColumns.length; ++newIndex) {\n          const newColumn = newColumns[newIndex];\n\n          if (oldColumn.id === newColumn.id) {\n            // The column still exists, but something could've changed about it.\n            // If the index changed or anything about the column changed, action needs\n            // to be taken.\n            if (oldIndex !== newIndex || !newColumn.isEqualTo(oldColumn)) {\n              // column reordering requires rebuilding the entire table, 1 per table\n              if (!contains(recreatedTableIdentifiers, pair.newTable.id)) {\n                this.addChange('recreate-table', { oldTable: pair.oldTable, newTable: pair.newTable });\n\n                recreatedTableIdentifiers.push(pair.newTable.id);\n              }\n            } else if (oldColumn.name !== newColumn.name) {\n              // TODO(zhm) this can't be hit because isEqualTo checks the names\n              // SQLite cannot rename columns, so column renames are a bit special\n              this.addChange('rename-column', { oldTable: pair.oldTable, newTable: pair.newTable, oldColumn: oldColumn, newColumn: newColumn });\n            }\n\n            exists = true;\n          }\n        }\n\n        if (!exists) {\n          this.addChange('drop-column', { oldTable: pair.oldTable, newTable: pair.newTable, column: oldColumn });\n        }\n      }\n\n      for (let newIndex = 0; newIndex < newColumns.length; ++newIndex) {\n        const newColumn = newColumns[newIndex];\n\n        let exists = false;\n\n        for (let oldIndex = 0; oldIndex < oldColumns.length; ++oldIndex) {\n          const oldColumn = oldColumns[oldIndex];\n\n          if (oldColumn.id === newColumn.id) {\n            exists = true;\n          }\n        }\n\n        if (!exists) {\n          this.addChange('add-column', { oldTable: pair.oldTable, newTable: pair.newTable, column: newColumn });\n        }\n      }\n    }\n  }\n\n  diffViews() {\n    const newViews = this.newSchema && this.newSchema.views ? this.newSchema.views : null;\n    const oldViews = this.oldSchema && this.oldSchema.views ? this.oldSchema.views : null;\n\n    if (oldViews) {\n      for (const oldView of oldViews) {\n        let newView = null;\n\n        if (newViews) {\n          newView = find(newViews, (t) => t.id === oldView.id);\n        }\n\n        if (newView) {\n          if (oldView.name !== newView.name) {\n            this.addChange('drop-view', { oldView: oldView });\n            this.addChange('create-view', { newView: newView });\n          }\n        } else {\n          this.addChange('drop-view', { oldView: oldView });\n        }\n      }\n    }\n\n    if (newViews) {\n      for (const newView of newViews) {\n        let oldView = null;\n\n        if (oldViews) {\n          oldView = find(oldViews, (t) => t.id === newView.id);\n        }\n\n        if (!oldView) {\n          // do a drop for now `ERROR:  cannot change name of view column`\n          this.addChange('drop-view', { oldView: newView });\n          this.addChange('create-view', { newView: newView });\n        }\n      }\n    }\n  }\n\n  diffViewColumns() {\n    const viewPairs = this.viewPairsForColumnDiff;\n\n    const recreatedViewIdentifiers = [];\n\n    for (const pair of viewPairs) {\n      let needsRebuild = false;\n\n      const oldColumns = pair.oldView ? pair.oldView.columns : [];\n      const newColumns = pair.newView ? pair.newView.columns : [];\n\n      for (let oldIndex = 0; oldIndex < oldColumns.length; ++oldIndex) {\n        const oldColumn = oldColumns[oldIndex];\n\n        let exists = false;\n\n        for (let newIndex = 0; newIndex < newColumns.length; ++newIndex) {\n          const newColumn = newColumns[newIndex];\n\n          if (oldColumn.column.id === newColumn.column.id) {\n            // The column still exists, but something could've changed about it.\n            // If the index changed or anything about the column changed, action needs\n            // to be taken.\n            if (oldIndex !== newIndex ||\n                newColumn.column.name !== oldColumn.column.name ||\n                newColumn.column.type !== oldColumn.column.type ||\n                newColumn.alias !== oldColumn.alias) {\n              // column moved within view\n              needsRebuild = true;\n            }\n\n            exists = true;\n          }\n        }\n\n        if (!exists) {\n          // column removed from view\n          needsRebuild = true;\n        }\n      }\n\n      for (let newIndex = 0; newIndex < newColumns.length; ++newIndex) {\n        const newColumn = newColumns[newIndex];\n\n        let exists = false;\n\n        for (let oldIndex = 0; oldIndex < oldColumns.length; ++oldIndex) {\n          const oldColumn = oldColumns[oldIndex];\n\n          if (oldColumn.column.id === newColumn.column.id) {\n            exists = true;\n          }\n        }\n\n        if (!exists) {\n          // column added to view\n          needsRebuild = true;\n        }\n      }\n\n      if (needsRebuild) {\n        if (!contains(recreatedViewIdentifiers, pair.newView.id)) {\n          this.addChange('drop-view', { oldView: pair.oldView });\n          this.addChange('create-view', { newView: pair.newView });\n\n          recreatedViewIdentifiers.push(pair.newView.id);\n        }\n      }\n    }\n  }\n}\n"],"file":"schema-differ.js"}
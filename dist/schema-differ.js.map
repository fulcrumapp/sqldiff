{"version":3,"sources":["../src/schema-differ.js"],"names":["SchemaDiff","oldSchema","newSchema","diff","changes","diffTables","diffColumns","diffViews","diffViewColumns","rawChanges","slice","conflate","addChange","type","params","push","SchemaChange","newTables","tables","oldTables","oldTable","newTable","t","id","name","recreates","change","ids","isSimpleChange","isTableAlreadyBeingRecreated","tablePairs","tablesPairsForColumnDiff","recreatedTableIdentifiers","pair","oldColumns","columns","newColumns","oldIndex","length","oldColumn","exists","newIndex","newColumn","isEqualTo","column","newViews","views","oldViews","oldView","newView","viewPairs","viewPairsForColumnDiff","recreatedViewIdentifiers","needsRebuild","alias","pairs","map"],"mappings":"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","sourcesContent":["import { find, map, reject, includes, filter } from 'lodash';\nimport SchemaChange from './schema-change';\n\nexport default class SchemaDiff {\n  constructor(oldSchema, newSchema) {\n    this.oldSchema = oldSchema;\n    this.newSchema = newSchema;\n  }\n\n  diff() {\n    this.changes = [];\n\n    this.diffTables();\n\n    this.diffColumns();\n\n    this.diffViews();\n\n    this.diffViewColumns();\n\n    this.rawChanges = this.changes.slice();\n\n    this.conflate();\n\n    return this.changes;\n  }\n\n  addChange(type, params) {\n    this.changes.push(new SchemaChange(type, params));\n  }\n\n  diffTables() {\n    const newTables = this.newSchema ? this.newSchema.tables : null;\n    const oldTables = this.oldSchema ? this.oldSchema.tables : null;\n\n    if (this.oldSchema) {\n      for (const oldTable of this.oldSchema.tables) {\n        let newTable = null;\n\n        if (newTables) {\n          newTable = find(newTables, (t) => t.id === oldTable.id);\n        }\n\n        if (newTable) {\n          if (newTable.name !== oldTable.name) {\n            this.addChange('rename-table', { oldTable: oldTable, newTable: newTable });\n          }\n        } else {\n          this.addChange('drop-table', { oldTable: oldTable });\n        }\n      }\n    }\n\n    if (this.newSchema) {\n      for (const newTable of this.newSchema.tables) {\n        let oldTable = null;\n\n        if (oldTables) {\n          oldTable = find(oldTables, (t) => t.id === newTable.id);\n        }\n\n        if (!oldTable) {\n          this.addChange('create-table', { newTable: newTable });\n        }\n      }\n    }\n  }\n\n  conflate() {\n    // if we're re-creating a table, we don't need to rename, drop, or add any new columns because\n    // the recreate handles all of those.\n    const recreates = filter(this.changes, change => change.type === 'recreate-table');\n\n    const ids = map(recreates, change => change.newTable.id);\n\n    this.changes = reject(this.changes, change => {\n      const isSimpleChange = includes([ 'rename-column', 'drop-column', 'add-column' ], change.type);\n\n      let isTableAlreadyBeingRecreated = false;\n\n      if (change.newTable) {\n        isTableAlreadyBeingRecreated = includes(ids, change.newTable.id);\n      }\n\n      return isSimpleChange && isTableAlreadyBeingRecreated;\n    });\n  }\n\n  get tablesPairsForColumnDiff() {\n    // only tables that exist in the old and new schemas should be diff'd for columns\n    let pairs = [];\n\n    if (this.newSchema) {\n      pairs = this.newSchema.tables.map((newTable) => {\n        let oldTable = null;\n\n        if (this.oldSchema) {\n          oldTable = find(this.oldSchema.tables, (t) => t.id === newTable.id);\n        }\n\n        return { oldTable: oldTable, newTable: newTable };\n      });\n    }\n\n    // only process column-level changes on tables that exist already\n    pairs = filter(pairs, pair => {\n      return pair.oldTable && pair.newTable && pair.oldTable.id === pair.newTable.id;\n    });\n\n    return pairs;\n  }\n\n  get viewPairsForColumnDiff() {\n    // only views that exist in the old and new schemas should be diff'd\n    let pairs = [];\n\n    if (this.newSchema && this.newSchema.views) {\n      pairs = this.newSchema.views.map((newView) => {\n        let oldView = null;\n\n        if (this.oldSchema) {\n          oldView = find(this.oldSchema.views, (t) => t.id === newView.id);\n        }\n\n        return { oldView: oldView, newView: newView };\n      });\n    }\n\n    // only process column-level changes on views that exist already\n    pairs = filter(pairs, (pair) => {\n      return pair.oldView && pair.newView && pair.oldView.id === pair.newView.id;\n    });\n\n    return pairs;\n  }\n\n  diffColumns() {\n    const tablePairs = this.tablesPairsForColumnDiff;\n\n    // Some changes (like column re-ordering) require completely recreating the table.\n    // Track the tables we've determined need to be re-created so we don't re-create\n    // it multiple times for multiple column re-orderings on the same table.\n    const recreatedTableIdentifiers = [];\n\n    for (const pair of tablePairs) {\n      const oldColumns = pair.oldTable ? pair.oldTable.columns : [];\n      const newColumns = pair.newTable ? pair.newTable.columns : [];\n\n      for (let oldIndex = 0; oldIndex < oldColumns.length; ++oldIndex) {\n        const oldColumn = oldColumns[oldIndex];\n\n        let exists = false;\n\n        for (let newIndex = 0; newIndex < newColumns.length; ++newIndex) {\n          const newColumn = newColumns[newIndex];\n\n          if (oldColumn.id === newColumn.id) {\n            // The column still exists, but something could've changed about it.\n            // If the index changed or anything about the column changed, action needs\n            // to be taken.\n            if (oldIndex !== newIndex || !newColumn.isEqualTo(oldColumn)) {\n              // column reordering requires rebuilding the entire table, 1 per table\n              if (!includes(recreatedTableIdentifiers, pair.newTable.id)) {\n                this.addChange('recreate-table', { oldTable: pair.oldTable, newTable: pair.newTable });\n\n                recreatedTableIdentifiers.push(pair.newTable.id);\n              }\n            } else if (oldColumn.name !== newColumn.name) {\n              // TODO(zhm) this can't be hit because isEqualTo checks the names\n              // SQLite cannot rename columns, so column renames are a bit special\n              this.addChange('rename-column', { oldTable: pair.oldTable, newTable: pair.newTable, oldColumn: oldColumn, newColumn: newColumn });\n            }\n\n            exists = true;\n          }\n        }\n\n        if (!exists) {\n          this.addChange('drop-column', { oldTable: pair.oldTable, newTable: pair.newTable, column: oldColumn });\n        }\n      }\n\n      for (let newIndex = 0; newIndex < newColumns.length; ++newIndex) {\n        const newColumn = newColumns[newIndex];\n\n        let exists = false;\n\n        for (let oldIndex = 0; oldIndex < oldColumns.length; ++oldIndex) {\n          const oldColumn = oldColumns[oldIndex];\n\n          if (oldColumn.id === newColumn.id) {\n            exists = true;\n          }\n        }\n\n        if (!exists) {\n          this.addChange('add-column', { oldTable: pair.oldTable, newTable: pair.newTable, column: newColumn });\n        }\n      }\n    }\n  }\n\n  diffViews() {\n    const newViews = this.newSchema && this.newSchema.views ? this.newSchema.views : null;\n    const oldViews = this.oldSchema && this.oldSchema.views ? this.oldSchema.views : null;\n\n    if (oldViews) {\n      for (const oldView of oldViews) {\n        let newView = null;\n\n        if (newViews) {\n          newView = find(newViews, (t) => t.id === oldView.id);\n        }\n\n        if (newView) {\n          if (oldView.name !== newView.name) {\n            this.addChange('drop-view', { oldView: oldView });\n            this.addChange('create-view', { newView: newView });\n          }\n        } else {\n          this.addChange('drop-view', { oldView: oldView });\n        }\n      }\n    }\n\n    if (newViews) {\n      for (const newView of newViews) {\n        let oldView = null;\n\n        if (oldViews) {\n          oldView = find(oldViews, (t) => t.id === newView.id);\n        }\n\n        if (!oldView) {\n          // do a drop for now `ERROR:  cannot change name of view column`\n          this.addChange('drop-view', { oldView: newView });\n          this.addChange('create-view', { newView: newView });\n        }\n      }\n    }\n  }\n\n  diffViewColumns() {\n    const viewPairs = this.viewPairsForColumnDiff;\n\n    const recreatedViewIdentifiers = [];\n\n    for (const pair of viewPairs) {\n      let needsRebuild = false;\n\n      const oldColumns = pair.oldView ? pair.oldView.columns : [];\n      const newColumns = pair.newView ? pair.newView.columns : [];\n\n      for (let oldIndex = 0; oldIndex < oldColumns.length; ++oldIndex) {\n        const oldColumn = oldColumns[oldIndex];\n\n        let exists = false;\n\n        for (let newIndex = 0; newIndex < newColumns.length; ++newIndex) {\n          const newColumn = newColumns[newIndex];\n\n          if (oldColumn.column.id === newColumn.column.id) {\n            // The column still exists, but something could've changed about it.\n            // If the index changed or anything about the column changed, action needs\n            // to be taken.\n            if (oldIndex !== newIndex ||\n                newColumn.column.name !== oldColumn.column.name ||\n                newColumn.column.type !== oldColumn.column.type ||\n                newColumn.alias !== oldColumn.alias) {\n              // column moved within view\n              needsRebuild = true;\n            }\n\n            exists = true;\n          }\n        }\n\n        if (!exists) {\n          // column removed from view\n          needsRebuild = true;\n        }\n      }\n\n      for (let newIndex = 0; newIndex < newColumns.length; ++newIndex) {\n        const newColumn = newColumns[newIndex];\n\n        let exists = false;\n\n        for (let oldIndex = 0; oldIndex < oldColumns.length; ++oldIndex) {\n          const oldColumn = oldColumns[oldIndex];\n\n          if (oldColumn.column.id === newColumn.column.id) {\n            exists = true;\n          }\n        }\n\n        if (!exists) {\n          // column added to view\n          needsRebuild = true;\n        }\n      }\n\n      if (needsRebuild) {\n        if (!includes(recreatedViewIdentifiers, pair.newView.id)) {\n          this.addChange('drop-view', { oldView: pair.oldView });\n          this.addChange('create-view', { newView: pair.newView });\n\n          recreatedViewIdentifiers.push(pair.newView.id);\n        }\n      }\n    }\n  }\n}\n"],"file":"schema-differ.js"}
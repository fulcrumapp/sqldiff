{"version":3,"sources":["../src/schema-differ.js"],"names":[],"mappings":"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","file":"schema-differ.js","sourcesContent":["import _ from 'underscore';\nimport SchemaChange from './schema-change';\n\nexport default class SchemaDiff {\n  constructor(oldSchema, newSchema) {\n    this.oldSchema = oldSchema;\n    this.newSchema = newSchema;\n  }\n\n  diff() {\n    this.changes = [];\n\n    this.diffTables();\n\n    this.diffColumns();\n\n    this.diffViews();\n\n    this.diffViewColumns();\n\n    this.rawChanges = this.changes.slice();\n\n    this.conflate();\n\n    return this.changes;\n  }\n\n  addChange(type, params) {\n    this.changes.push(new SchemaChange(type, params));\n  }\n\n  diffTables() {\n    const newTables = (this.newSchema ? this.newSchema.tables : null);\n    const oldTables = (this.oldSchema ? this.oldSchema.tables : null);\n\n    if (this.oldSchema) {\n      for (const oldTable of this.oldSchema.tables) {\n        let newTable = null;\n\n        if (newTables) {\n          newTable = _.find(newTables, (t) => t.id === oldTable.id);\n        }\n\n        if (newTable) {\n          if (newTable.name !== oldTable.name) {\n            this.addChange('rename-table', {oldTable: oldTable, newTable: newTable});\n          }\n        } else {\n          this.addChange('drop-table', {oldTable: oldTable});\n        }\n      }\n    }\n\n    if (this.newSchema) {\n      for (const newTable of this.newSchema.tables) {\n        let oldTable = null;\n\n        if (oldTables) {\n          oldTable = _.find(oldTables, (t) => t.id === newTable.id);\n        }\n\n        if (!oldTable) {\n          this.addChange('create-table', {newTable: newTable});\n        }\n      }\n    }\n  }\n\n  conflate() {\n    // if we're re-creating a table, we don't need to rename, drop, or add any new columns because\n    // the recreate handles all of those.\n    const recreates = _.select(this.changes, (change) => {\n      return change.type === 'recreate-table';\n    });\n\n    const ids = _.map(recreates, (change) => change.newTable.id);\n\n    this.changes = _.reject(this.changes, (change) => {\n      const isSimpleChange = _.contains(['rename-column', 'drop-column', 'add-column'], change.type);\n\n      let isTableAlreadyBeingRecreated = false;\n\n      if (change.newTable) {\n        isTableAlreadyBeingRecreated = _.contains(ids, change.newTable.id);\n      }\n\n      return isSimpleChange && isTableAlreadyBeingRecreated;\n    });\n  }\n\n  get tablesPairsForColumnDiff() {\n    // only tables that exist in the old and new schemas should be diff'd for columns\n    let pairs = [];\n\n    if (this.newSchema) {\n      pairs = this.newSchema.tables.map((newTable) => {\n        let oldTable = null;\n\n        if (this.oldSchema) {\n          oldTable = _.find(this.oldSchema.tables, (t) => t.id === newTable.id);\n        }\n\n        return { oldTable: oldTable, newTable: newTable };\n      });\n    }\n\n    // only process column-level changes on tables that exist already\n    pairs = _.filter(pairs, (pair) => {\n      return pair.oldTable && pair.newTable && pair.oldTable.id === pair.newTable.id;\n    });\n\n    return pairs;\n  }\n\n  get viewPairsForColumnDiff() {\n    // only views that exist in the old and new schemas should be diff'd\n    let pairs = [];\n\n    if (this.newSchema && this.newSchema.views) {\n      pairs = this.newSchema.views.map((newView) => {\n        let oldView = null;\n\n        if (this.oldSchema) {\n          oldView = _.find(this.oldSchema.views, (t) => t.id === newView.id);\n        }\n\n        return { oldView: oldView, newView: newView };\n      });\n    }\n\n    // only process column-level changes on views that exist already\n    pairs = _.filter(pairs, (pair) => {\n      return pair.oldView && pair.newView && pair.oldView.id === pair.newView.id;\n    });\n\n    return pairs;\n  }\n\n  diffColumns() {\n    const tablePairs = this.tablesPairsForColumnDiff;\n\n    // Some changes (like column re-ordering) require completely recreating the table.\n    // Track the tables we've determined need to be re-created so we don't re-create\n    // it multiple times for multiple column re-orderings on the same table.\n    const recreatedTableIdentifiers = [];\n\n    for (const pair of tablePairs) {\n      const oldColumns = (pair.oldTable ? pair.oldTable.columns : []);\n      const newColumns = (pair.newTable ? pair.newTable.columns : []);\n\n      for (let oldIndex = 0; oldIndex < oldColumns.length; ++oldIndex) {\n        const oldColumn = oldColumns[oldIndex];\n\n        let exists = false;\n\n        for (let newIndex = 0; newIndex < newColumns.length; ++newIndex) {\n          const newColumn = newColumns[newIndex];\n\n          if (oldColumn.id === newColumn.id) {\n            // The column still exists, but something could've changed about it.\n            // If the index changed or anything about the column changed, action needs\n            // to be taken.\n            if (oldIndex !== newIndex || !newColumn.isEqualTo(oldColumn)) {\n              // column reordering requires rebuilding the entire table, 1 per table\n              if (!_.contains(recreatedTableIdentifiers, pair.newTable.id)) {\n                this.addChange('recreate-table', {oldTable: pair.oldTable, newTable: pair.newTable});\n\n                recreatedTableIdentifiers.push(pair.newTable.id);\n              }\n            } else if (oldColumn.name !== newColumn.name) {\n              // TODO(zhm) this can't be hit because isEqualTo checks the names\n              // SQLite cannot rename columns, so column renames are a bit special\n              this.addChange('rename-column', {oldTable: pair.oldTable, newTable: pair.newTable, column: oldColumn});\n            }\n\n            exists = true;\n          }\n        }\n\n        if (!exists) {\n          this.addChange('drop-column', {oldTable: pair.oldTable, newTable: pair.newTable, column: oldColumn});\n        }\n      }\n\n      for (let newIndex = 0; newIndex < newColumns.length; ++newIndex) {\n        const newColumn = newColumns[newIndex];\n\n        let exists = false;\n\n        for (let oldIndex = 0; oldIndex < oldColumns.length; ++oldIndex) {\n          const oldColumn = oldColumns[oldIndex];\n\n          if (oldColumn.id === newColumn.id) {\n            exists = true;\n          }\n        }\n\n        if (!exists) {\n          this.addChange('add-column', {oldTable: pair.oldTable, newTable: pair.newTable, column: newColumn});\n        }\n      }\n    }\n  }\n\n  diffViews() {\n    const newViews = (this.newSchema && this.newSchema.views ? this.newSchema.views : null);\n    const oldViews = (this.oldSchema && this.oldSchema.views ? this.oldSchema.views : null);\n\n    if (oldViews) {\n      for (const oldView of oldViews) {\n        let newView = null;\n\n        if (newViews) {\n          newView = _.find(newViews, (t) => t.id === oldView.id);\n        }\n\n        if (newView) {\n          if (newView.name !== newView.name) {\n            this.addChange('drop-view', {oldView: oldView});\n            this.addChange('create-view', {newView: newView});\n          }\n        } else {\n          this.addChange('drop-view', {oldView: oldView});\n        }\n      }\n    }\n\n    if (newViews) {\n      for (const newView of newViews) {\n        let oldView = null;\n\n        if (oldViews) {\n          oldView = _.find(oldViews, (t) => t.id === newView.id);\n        }\n\n        if (!oldView) {\n          this.addChange('create-view', {newView: newView});\n        }\n      }\n    }\n  }\n\n  diffViewColumns() {\n    const viewPairs = this.viewPairsForColumnDiff;\n\n    const recreatedViewIdentifiers = [];\n\n    for (const pair of viewPairs) {\n      let needsRebuild = false;\n\n      const oldColumns = (pair.oldView ? pair.oldView.columns : []);\n      const newColumns = (pair.newView ? pair.newView.columns : []);\n\n      for (let oldIndex = 0; oldIndex < oldColumns.length; ++oldIndex) {\n        const oldColumn = oldColumns[oldIndex];\n\n        let exists = false;\n\n        for (let newIndex = 0; newIndex < newColumns.length; ++newIndex) {\n          const newColumn = newColumns[newIndex];\n\n          if (oldColumn.column.id === newColumn.column.id) {\n            // The column still exists, but something could've changed about it.\n            // If the index changed or anything about the column changed, action needs\n            // to be taken.\n            if (oldIndex !== newIndex || !newColumn.column.isEqualTo(oldColumn.column) || newColumn.alias !== oldColumn.alias) {\n              // column moved within view\n              needsRebuild = true;\n            }\n\n            exists = true;\n          }\n        }\n\n        if (!exists) {\n          // column removed from view\n          needsRebuild = true;\n        }\n      }\n\n      for (let newIndex = 0; newIndex < newColumns.length; ++newIndex) {\n        const newColumn = newColumns[newIndex];\n\n        let exists = false;\n\n        for (let oldIndex = 0; oldIndex < oldColumns.length; ++oldIndex) {\n          const oldColumn = oldColumns[oldIndex];\n\n          if (oldColumn.column.id === newColumn.column.id) {\n            exists = true;\n          }\n        }\n\n        if (!exists) {\n          // column added to view\n          needsRebuild = true;\n        }\n      }\n\n      if (needsRebuild) {\n        if (!_.contains(recreatedViewIdentifiers, pair.newView.id)) {\n          this.addChange('drop-view', {oldView: pair.oldView});\n          this.addChange('create-view', {newView: pair.newView});\n\n          recreatedViewIdentifiers.push(pair.newView.id);\n        }\n      }\n    }\n  }\n}\n"]}
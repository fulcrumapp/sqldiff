{"version":3,"sources":["../src/schema-differ.js"],"names":[],"mappings":"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","file":"schema-differ.js","sourcesContent":["import _ from 'underscore';\nimport SchemaChange from './schema-change';\n\nexport default class SchemaDiff {\n  constructor(oldSchema, newSchema) {\n    this.oldSchema = oldSchema;\n    this.newSchema = newSchema;\n  }\n\n  diff() {\n    this.changes = [];\n\n    this.diffTables();\n\n    this.diffColumns();\n\n    this.diffViews();\n\n    this.diffViewColumns();\n\n    this.rawChanges = this.changes.slice();\n\n    this.conflate();\n\n    return this.changes;\n  }\n\n  addChange(type, params) {\n    this.changes.push(new SchemaChange(type, params));\n  }\n\n  diffTables() {\n    const newTables = (this.newSchema ? this.newSchema.tables : null);\n    const oldTables = (this.oldSchema ? this.oldSchema.tables : null);\n\n    if (this.oldSchema) {\n      for (const oldTable of this.oldSchema.tables) {\n        let newTable = null;\n\n        if (newTables) {\n          newTable = _.find(newTables, (t) => t.id === oldTable.id);\n        }\n\n        if (newTable) {\n          if (newTable.name !== oldTable.name) {\n            this.addChange('rename-table', {oldTable: oldTable, newTable: newTable});\n          }\n        } else {\n          this.addChange('drop-table', {oldTable: oldTable});\n        }\n      }\n    }\n\n    if (this.newSchema) {\n      for (const newTable of this.newSchema.tables) {\n        let oldTable = null;\n\n        if (oldTables) {\n          oldTable = _.find(oldTables, (t) => t.id === newTable.id);\n        }\n\n        if (!oldTable) {\n          this.addChange('create-table', {newTable: newTable});\n        }\n      }\n    }\n  }\n\n  conflate() {\n    // if we're re-creating a table, we don't need to rename, drop, or add any new columns because\n    // the recreate handles all of those.\n    const recreates = _.select(this.changes, (change) => {\n      return change.type === 'recreate-table';\n    });\n\n    const ids = _.map(recreates, (change) => change.newTable.id);\n\n    this.changes = _.reject(this.changes, (change) => {\n      const isSimpleChange = _.contains(['rename-column', 'drop-column', 'add-column'], change.type);\n\n      let isTableAlreadyBeingRecreated = false;\n\n      if (change.newTable) {\n        isTableAlreadyBeingRecreated = _.contains(ids, change.newTable.id);\n      }\n\n      return isSimpleChange && isTableAlreadyBeingRecreated;\n    });\n  }\n\n  get tablesPairsForColumnDiff() {\n    // only tables that exist in the old and new schemas should be diff'd for columns\n    let pairs = [];\n\n    if (this.newSchema) {\n      pairs = this.newSchema.tables.map((newTable) => {\n        let oldTable = null;\n\n        if (this.oldSchema) {\n          oldTable = _.find(this.oldSchema.tables, (t) => t.id === newTable.id);\n        }\n\n        return { oldTable: oldTable, newTable: newTable };\n      });\n    }\n\n    // only process column-level changes on tables that exist already\n    pairs = _.filter(pairs, (pair) => {\n      return pair.oldTable && pair.newTable && pair.oldTable.id === pair.newTable.id;\n    });\n\n    return pairs;\n  }\n\n  get viewPairsForColumnDiff() {\n    // only views that exist in the old and new schemas should be diff'd\n    let pairs = [];\n\n    if (this.newSchema && this.newSchema.views) {\n      pairs = this.newSchema.views.map((newView) => {\n        let oldView = null;\n\n        if (this.oldSchema) {\n          oldView = _.find(this.oldSchema.views, (t) => t.id === newView.id);\n        }\n\n        return { oldView: oldView, newView: newView };\n      });\n    }\n\n    // only process column-level changes on views that exist already\n    pairs = _.filter(pairs, (pair) => {\n      return pair.oldView && pair.newView && pair.oldView.id === pair.newView.id;\n    });\n\n    return pairs;\n  }\n\n  diffColumns() {\n    const tablePairs = this.tablesPairsForColumnDiff;\n\n    // Some changes (like column re-ordering) require completely recreating the table.\n    // Track the tables we've determined need to be re-created so we don't re-create\n    // it multiple times for multiple column re-orderings on the same table.\n    const recreatedTableIdentifiers = [];\n\n    for (const pair of tablePairs) {\n      const oldColumns = (pair.oldTable ? pair.oldTable.columns : []);\n      const newColumns = (pair.newTable ? pair.newTable.columns : []);\n\n      for (let oldIndex = 0; oldIndex < oldColumns.length; ++oldIndex) {\n        const oldColumn = oldColumns[oldIndex];\n\n        let exists = false;\n\n        for (let newIndex = 0; newIndex < newColumns.length; ++newIndex) {\n          const newColumn = newColumns[newIndex];\n\n          if (oldColumn.id === newColumn.id) {\n            // The column still exists, but something could've changed about it.\n            // If the index changed or anything about the column changed, action needs\n            // to be taken.\n            if (oldIndex !== newIndex || !newColumn.isEqualTo(oldColumn)) {\n              // column reordering requires rebuilding the entire table, 1 per table\n              if (!_.contains(recreatedTableIdentifiers, pair.newTable.id)) {\n                this.addChange('recreate-table', {oldTable: pair.oldTable, newTable: pair.newTable});\n\n                recreatedTableIdentifiers.push(pair.newTable.id);\n              }\n            } else if (oldColumn.name !== newColumn.name) {\n              // TODO(zhm) this can't be hit because isEqualTo checks the names\n              // SQLite cannot rename columns, so column renames are a bit special\n              this.addChange('rename-column', {oldTable: pair.oldTable, newTable: pair.newTable, column: oldColumn});\n            }\n\n            exists = true;\n          }\n        }\n\n        if (!exists) {\n          this.addChange('drop-column', {oldTable: pair.oldTable, newTable: pair.newTable, column: oldColumn});\n        }\n      }\n\n      for (let newIndex = 0; newIndex < newColumns.length; ++newIndex) {\n        const newColumn = newColumns[newIndex];\n\n        let exists = false;\n\n        for (let oldIndex = 0; oldIndex < oldColumns.length; ++oldIndex) {\n          const oldColumn = oldColumns[oldIndex];\n\n          if (oldColumn.id === newColumn.id) {\n            exists = true;\n          }\n        }\n\n        if (!exists) {\n          this.addChange('add-column', {oldTable: pair.oldTable, newTable: pair.newTable, column: newColumn});\n        }\n      }\n    }\n  }\n\n  diffViews() {\n    const newViews = (this.newSchema && this.newSchema.views ? this.newSchema.views : null);\n    const oldViews = (this.oldSchema && this.oldSchema.views ? this.oldSchema.views : null);\n\n    if (oldViews) {\n      for (const oldView of oldViews) {\n        let newView = null;\n\n        if (newViews) {\n          newView = _.find(newViews, (t) => t.id === oldView.id);\n        }\n\n        if (newView) {\n          if (newView.name !== newView.name) {\n            this.addChange('drop-view', {oldView: oldView});\n            this.addChange('create-view', {newView: newView});\n          }\n        } else {\n          this.addChange('drop-view', {oldView: oldView});\n        }\n      }\n    }\n\n    if (newViews) {\n      for (const newView of newViews) {\n        let oldView = null;\n\n        if (oldViews) {\n          oldView = _.find(oldViews, (t) => t.id === newView.id);\n        }\n\n        if (!oldView) {\n          this.addChange('create-view', {newView: newView});\n        }\n      }\n    }\n  }\n\n  diffViewColumns() {\n    const viewPairs = this.viewPairsForColumnDiff;\n\n    const recreatedViewIdentifiers = [];\n\n    for (const pair of viewPairs) {\n      let needsRebuild = false;\n\n      const oldColumns = (pair.oldView ? pair.oldView.columns : []);\n      const newColumns = (pair.newView ? pair.newView.columns : []);\n\n      for (let oldIndex = 0; oldIndex < oldColumns.length; ++oldIndex) {\n        const oldColumn = oldColumns[oldIndex];\n\n        let exists = false;\n\n        for (let newIndex = 0; newIndex < newColumns.length; ++newIndex) {\n          const newColumn = newColumns[newIndex];\n\n          if (oldColumn.column.id === newColumn.column.id) {\n            // The column still exists, but something could've changed about it.\n            // If the index changed or anything about the column changed, action needs\n            // to be taken.\n            if (oldIndex !== newIndex || !newColumn.column.isEqualTo(oldColumn.column) || newColumn.alias !== oldColumn.alias) {\n              // column moved within view\n              needsRebuild = true;\n            }\n\n            exists = true;\n          }\n        }\n\n        if (!exists) {\n          // column removed from view\n          needsRebuild = true;\n        }\n      }\n\n      for (let newIndex = 0; newIndex < newColumns.length; ++newIndex) {\n        const newColumn = newColumns[newIndex];\n\n        let exists = false;\n\n        for (let oldIndex = 0; oldIndex < oldColumns.length; ++oldIndex) {\n          const oldColumn = oldColumns[oldIndex];\n\n          if (oldColumn.column.id === newColumn.column.id) {\n            exists = true;\n          }\n        }\n\n        if (!exists) {\n          // column added to view\n          needsRebuild = true;\n        }\n      }\n\n      if (needsRebuild) {\n        if (!_.contains(recreatedViewIdentifiers, pair.newView.id)) {\n          this.addChange('drop-view', {oldView: pair.oldView});\n          this.addChange('create-view', {newView: pair.newView});\n\n          recreatedViewIdentifiers.push(pair.newView.id);\n        }\n      }\n    }\n  }\n}\n"]}
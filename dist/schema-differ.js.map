{"version":3,"sources":["../src/schema-differ.js"],"names":["SchemaDiff","oldSchema","newSchema","changes","diffTables","diffColumns","diffViews","diffViewColumns","rawChanges","slice","conflate","type","params","push","SchemaChange","newTables","tables","oldTables","oldTable","newTable","_","find","t","id","name","addChange","recreates","select","change","ids","map","reject","isSimpleChange","contains","isTableAlreadyBeingRecreated","tablePairs","tablesPairsForColumnDiff","recreatedTableIdentifiers","pair","oldColumns","columns","newColumns","oldIndex","length","oldColumn","exists","newIndex","newColumn","isEqualTo","column","newViews","views","oldViews","oldView","newView","viewPairs","viewPairsForColumnDiff","recreatedViewIdentifiers","needsRebuild","alias","pairs","filter"],"mappings":"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","file":"schema-differ.js","sourcesContent":["import _ from 'underscore';\nimport SchemaChange from './schema-change';\n\nexport default class SchemaDiff {\n  constructor(oldSchema, newSchema) {\n    this.oldSchema = oldSchema;\n    this.newSchema = newSchema;\n  }\n\n  diff() {\n    this.changes = [];\n\n    this.diffTables();\n\n    this.diffColumns();\n\n    this.diffViews();\n\n    this.diffViewColumns();\n\n    this.rawChanges = this.changes.slice();\n\n    this.conflate();\n\n    return this.changes;\n  }\n\n  addChange(type, params) {\n    this.changes.push(new SchemaChange(type, params));\n  }\n\n  diffTables() {\n    const newTables = (this.newSchema ? this.newSchema.tables : null);\n    const oldTables = (this.oldSchema ? this.oldSchema.tables : null);\n\n    if (this.oldSchema) {\n      for (const oldTable of this.oldSchema.tables) {\n        let newTable = null;\n\n        if (newTables) {\n          newTable = _.find(newTables, (t) => t.id === oldTable.id);\n        }\n\n        if (newTable) {\n          if (newTable.name !== oldTable.name) {\n            this.addChange('rename-table', {oldTable: oldTable, newTable: newTable});\n          }\n        } else {\n          this.addChange('drop-table', {oldTable: oldTable});\n        }\n      }\n    }\n\n    if (this.newSchema) {\n      for (const newTable of this.newSchema.tables) {\n        let oldTable = null;\n\n        if (oldTables) {\n          oldTable = _.find(oldTables, (t) => t.id === newTable.id);\n        }\n\n        if (!oldTable) {\n          this.addChange('create-table', {newTable: newTable});\n        }\n      }\n    }\n  }\n\n  conflate() {\n    // if we're re-creating a table, we don't need to rename, drop, or add any new columns because\n    // the recreate handles all of those.\n    const recreates = _.select(this.changes, (change) => {\n      return change.type === 'recreate-table';\n    });\n\n    const ids = _.map(recreates, (change) => change.newTable.id);\n\n    this.changes = _.reject(this.changes, (change) => {\n      const isSimpleChange = _.contains(['rename-column', 'drop-column', 'add-column'], change.type);\n\n      let isTableAlreadyBeingRecreated = false;\n\n      if (change.newTable) {\n        isTableAlreadyBeingRecreated = _.contains(ids, change.newTable.id);\n      }\n\n      return isSimpleChange && isTableAlreadyBeingRecreated;\n    });\n  }\n\n  get tablesPairsForColumnDiff() {\n    // only tables that exist in the old and new schemas should be diff'd for columns\n    let pairs = [];\n\n    if (this.newSchema) {\n      pairs = this.newSchema.tables.map((newTable) => {\n        let oldTable = null;\n\n        if (this.oldSchema) {\n          oldTable = _.find(this.oldSchema.tables, (t) => t.id === newTable.id);\n        }\n\n        return { oldTable: oldTable, newTable: newTable };\n      });\n    }\n\n    // only process column-level changes on tables that exist already\n    pairs = _.filter(pairs, (pair) => {\n      return pair.oldTable && pair.newTable && pair.oldTable.id === pair.newTable.id;\n    });\n\n    return pairs;\n  }\n\n  get viewPairsForColumnDiff() {\n    // only views that exist in the old and new schemas should be diff'd\n    let pairs = [];\n\n    if (this.newSchema && this.newSchema.views) {\n      pairs = this.newSchema.views.map((newView) => {\n        let oldView = null;\n\n        if (this.oldSchema) {\n          oldView = _.find(this.oldSchema.views, (t) => t.id === newView.id);\n        }\n\n        return { oldView: oldView, newView: newView };\n      });\n    }\n\n    // only process column-level changes on views that exist already\n    pairs = _.filter(pairs, (pair) => {\n      return pair.oldView && pair.newView && pair.oldView.id === pair.newView.id;\n    });\n\n    return pairs;\n  }\n\n  diffColumns() {\n    const tablePairs = this.tablesPairsForColumnDiff;\n\n    // Some changes (like column re-ordering) require completely recreating the table.\n    // Track the tables we've determined need to be re-created so we don't re-create\n    // it multiple times for multiple column re-orderings on the same table.\n    const recreatedTableIdentifiers = [];\n\n    for (const pair of tablePairs) {\n      const oldColumns = (pair.oldTable ? pair.oldTable.columns : []);\n      const newColumns = (pair.newTable ? pair.newTable.columns : []);\n\n      for (let oldIndex = 0; oldIndex < oldColumns.length; ++oldIndex) {\n        const oldColumn = oldColumns[oldIndex];\n\n        let exists = false;\n\n        for (let newIndex = 0; newIndex < newColumns.length; ++newIndex) {\n          const newColumn = newColumns[newIndex];\n\n          if (oldColumn.id === newColumn.id) {\n            // The column still exists, but something could've changed about it.\n            // If the index changed or anything about the column changed, action needs\n            // to be taken.\n            if (oldIndex !== newIndex || !newColumn.isEqualTo(oldColumn)) {\n              // column reordering requires rebuilding the entire table, 1 per table\n              if (!_.contains(recreatedTableIdentifiers, pair.newTable.id)) {\n                this.addChange('recreate-table', {oldTable: pair.oldTable, newTable: pair.newTable});\n\n                recreatedTableIdentifiers.push(pair.newTable.id);\n              }\n            } else if (oldColumn.name !== newColumn.name) {\n              // TODO(zhm) this can't be hit because isEqualTo checks the names\n              // SQLite cannot rename columns, so column renames are a bit special\n              this.addChange('rename-column', {oldTable: pair.oldTable, newTable: pair.newTable, column: oldColumn});\n            }\n\n            exists = true;\n          }\n        }\n\n        if (!exists) {\n          this.addChange('drop-column', {oldTable: pair.oldTable, newTable: pair.newTable, column: oldColumn});\n        }\n      }\n\n      for (let newIndex = 0; newIndex < newColumns.length; ++newIndex) {\n        const newColumn = newColumns[newIndex];\n\n        let exists = false;\n\n        for (let oldIndex = 0; oldIndex < oldColumns.length; ++oldIndex) {\n          const oldColumn = oldColumns[oldIndex];\n\n          if (oldColumn.id === newColumn.id) {\n            exists = true;\n          }\n        }\n\n        if (!exists) {\n          this.addChange('add-column', {oldTable: pair.oldTable, newTable: pair.newTable, column: newColumn});\n        }\n      }\n    }\n  }\n\n  diffViews() {\n    const newViews = (this.newSchema && this.newSchema.views ? this.newSchema.views : null);\n    const oldViews = (this.oldSchema && this.oldSchema.views ? this.oldSchema.views : null);\n\n    if (oldViews) {\n      for (const oldView of oldViews) {\n        let newView = null;\n\n        if (newViews) {\n          newView = _.find(newViews, (t) => t.id === oldView.id);\n        }\n\n        if (newView) {\n          if (newView.name !== newView.name) {\n            this.addChange('drop-view', {oldView: oldView});\n            this.addChange('create-view', {newView: newView});\n          }\n        } else {\n          this.addChange('drop-view', {oldView: oldView});\n        }\n      }\n    }\n\n    if (newViews) {\n      for (const newView of newViews) {\n        let oldView = null;\n\n        if (oldViews) {\n          oldView = _.find(oldViews, (t) => t.id === newView.id);\n        }\n\n        if (!oldView) {\n          // do a drop for now `ERROR:  cannot change name of view column`\n          this.addChange('drop-view', {oldView: newView});\n          this.addChange('create-view', {newView: newView});\n        }\n      }\n    }\n  }\n\n  diffViewColumns() {\n    const viewPairs = this.viewPairsForColumnDiff;\n\n    const recreatedViewIdentifiers = [];\n\n    for (const pair of viewPairs) {\n      let needsRebuild = false;\n\n      const oldColumns = (pair.oldView ? pair.oldView.columns : []);\n      const newColumns = (pair.newView ? pair.newView.columns : []);\n\n      for (let oldIndex = 0; oldIndex < oldColumns.length; ++oldIndex) {\n        const oldColumn = oldColumns[oldIndex];\n\n        let exists = false;\n\n        for (let newIndex = 0; newIndex < newColumns.length; ++newIndex) {\n          const newColumn = newColumns[newIndex];\n\n          if (oldColumn.column.id === newColumn.column.id) {\n            // The column still exists, but something could've changed about it.\n            // If the index changed or anything about the column changed, action needs\n            // to be taken.\n            if (oldIndex !== newIndex ||\n                newColumn.column.name !== oldColumn.column.name ||\n                newColumn.column.type !== oldColumn.column.type ||\n                newColumn.alias !== oldColumn.alias) {\n              // column moved within view\n              needsRebuild = true;\n            }\n\n            exists = true;\n          }\n        }\n\n        if (!exists) {\n          // column removed from view\n          needsRebuild = true;\n        }\n      }\n\n      for (let newIndex = 0; newIndex < newColumns.length; ++newIndex) {\n        const newColumn = newColumns[newIndex];\n\n        let exists = false;\n\n        for (let oldIndex = 0; oldIndex < oldColumns.length; ++oldIndex) {\n          const oldColumn = oldColumns[oldIndex];\n\n          if (oldColumn.column.id === newColumn.column.id) {\n            exists = true;\n          }\n        }\n\n        if (!exists) {\n          // column added to view\n          needsRebuild = true;\n        }\n      }\n\n      if (needsRebuild) {\n        if (!_.contains(recreatedViewIdentifiers, pair.newView.id)) {\n          this.addChange('drop-view', {oldView: pair.oldView});\n          this.addChange('create-view', {newView: pair.newView});\n\n          recreatedViewIdentifiers.push(pair.newView.id);\n        }\n      }\n    }\n  }\n}\n"]}